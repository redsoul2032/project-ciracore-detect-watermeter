{
    "scene_array": [
        {
            "data": "{\n    \"connections\": [\n        {\n            \"in_id\": \"{9c35af66-8ed0-4025-98a0-91bf863bea93}\",\n            \"in_index\": 0,\n            \"out_id\": \"{d0df80da-3f8d-4ce9-b409-cdd4d4d36bc9}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{feae2584-4b0d-4af6-b3c7-44efe94224b7}\",\n            \"in_index\": 0,\n            \"out_id\": \"{2eeafae2-967e-413f-b62c-e7d7d14cde4b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b77c82a0-7725-4d1d-a642-1ee90bd7724e}\",\n            \"in_index\": 0,\n            \"out_id\": \"{fadd0b2a-d532-442c-8d6d-55a175035103}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9453645c-2278-4751-8704-973d72912e8b}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3a830103-0670-4f11-8bff-a216976cb174}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{86ebbce9-a86e-499f-b590-eeed334e3049}\",\n            \"in_index\": 0,\n            \"out_id\": \"{492ccc69-fba7-4067-a75f-c51c58b1fbb2}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{7e2d2d04-7695-4878-8802-c47f698f2127}\",\n            \"in_index\": 0,\n            \"out_id\": \"{fe09216a-af44-40be-b4fd-8036ea6df5f5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{fe09216a-af44-40be-b4fd-8036ea6df5f5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"in_index\": 0,\n            \"out_id\": \"{968d2c17-587c-446d-9574-f2fc0c0b2fa7}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9453645c-2278-4751-8704-973d72912e8b}\",\n            \"in_index\": 1,\n            \"out_id\": \"{feae2584-4b0d-4af6-b3c7-44efe94224b7}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{3a830103-0670-4f11-8bff-a216976cb174}\",\n            \"in_index\": 0,\n            \"out_id\": \"{5b7a6db7-3f5f-4c01-80ed-b1cd0bb81ec9}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{fe09216a-af44-40be-b4fd-8036ea6df5f5}\",\n            \"in_index\": 1,\n            \"out_id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"in_index\": 0,\n            \"out_id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"in_index\": 0,\n            \"out_id\": \"{e1c40e00-f9ef-48fc-bfd9-f8dd7be6d16f}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{16804e1f-675a-46a1-a827-6d103e4c73a2}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3504846f-0b73-4190-87c2-b5a1677988d8}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"in_index\": 0,\n            \"out_id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{3504846f-0b73-4190-87c2-b5a1677988d8}\",\n            \"in_index\": 1,\n            \"out_id\": \"{b77c82a0-7725-4d1d-a642-1ee90bd7724e}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"in_index\": 0,\n            \"out_id\": \"{e1c40e00-f9ef-48fc-bfd9-f8dd7be6d16f}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{406f25f2-4055-4e18-a69b-e6e5b7009d66}\",\n            \"in_index\": 0,\n            \"out_id\": \"{fe09216a-af44-40be-b4fd-8036ea6df5f5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{a7b408c0-861c-4e2c-82c3-d4260327a034}\",\n            \"in_index\": 0,\n            \"out_id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9739196d-15a4-46b0-bc5f-4f2bf45d7212}\",\n            \"in_index\": 0,\n            \"out_id\": \"{2eeafae2-967e-413f-b62c-e7d7d14cde4b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{588c7f0d-4ca7-4971-bbcf-4a0fcf39866e}\",\n            \"in_index\": 0,\n            \"out_id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{64b40065-a40f-4b57-b157-d08fedbec40f}\",\n            \"in_index\": 0,\n            \"out_id\": \"{cd15e53e-2f01-404a-ac4b-542abcaa5c69}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{cd15e53e-2f01-404a-ac4b-542abcaa5c69}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{fadd0b2a-d532-442c-8d6d-55a175035103}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{2eeafae2-967e-413f-b62c-e7d7d14cde4b}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b8a07e5c-f5b5-4eb0-92de-08f582e8f3fb}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{99cb2d68-fc87-4409-95d7-d4750f522386}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3504846f-0b73-4190-87c2-b5a1677988d8}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{968d2c17-587c-446d-9574-f2fc0c0b2fa7}\",\n            \"in_index\": 0,\n            \"out_id\": \"{e1c40e00-f9ef-48fc-bfd9-f8dd7be6d16f}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{56771f03-8648-49e6-9c63-f1a1870d0211}\",\n            \"in_index\": 0,\n            \"out_id\": \"{cd15e53e-2f01-404a-ac4b-542abcaa5c69}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9d4cb57e-dad9-4644-9bd8-d42eb54d2cc8}\",\n            \"in_index\": 0,\n            \"out_id\": \"{3504846f-0b73-4190-87c2-b5a1677988d8}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f5779cab-a930-4118-bbfc-df8f0974bf71}\",\n            \"in_index\": 0,\n            \"out_id\": \"{fadd0b2a-d532-442c-8d6d-55a175035103}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{d0df80da-3f8d-4ce9-b409-cdd4d4d36bc9}\",\n            \"in_index\": 0,\n            \"out_id\": \"{e1c40e00-f9ef-48fc-bfd9-f8dd7be6d16f}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{72531559-9ee2-4bca-ab29-1ab83bba3229}\",\n            \"in_index\": 0,\n            \"out_id\": \"{9453645c-2278-4751-8704-973d72912e8b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{88773735-d9a9-4381-a3a6-ac1aecd32ec8}\",\n            \"in_index\": 0,\n            \"out_id\": \"{9c35af66-8ed0-4025-98a0-91bf863bea93}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{0d1d75b3-a84c-4955-abc1-63603832ae24}\",\n            \"in_index\": 0,\n            \"out_id\": \"{88773735-d9a9-4381-a3a6-ac1aecd32ec8}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9c29ed9f-dc55-4887-ba1a-cbc5d85385ae}\",\n            \"in_index\": 0,\n            \"out_id\": \"{9453645c-2278-4751-8704-973d72912e8b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9468a5af-6e5b-42a9-ab82-9eca1851bb81}\",\n            \"in_index\": 0,\n            \"out_id\": \"{9453645c-2278-4751-8704-973d72912e8b}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b8a07e5c-f5b5-4eb0-92de-08f582e8f3fb}\",\n            \"in_index\": 0,\n            \"out_id\": \"{0d1d75b3-a84c-4955-abc1-63603832ae24}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{5b7a6db7-3f5f-4c01-80ed-b1cd0bb81ec9}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b8a07e5c-f5b5-4eb0-92de-08f582e8f3fb}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{692931a4-0d60-4815-80bc-36ef474bec1d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{5b7a6db7-3f5f-4c01-80ed-b1cd0bb81ec9}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{3504846f-0b73-4190-87c2-b5a1677988d8}\",\n            \"in_index\": 0,\n            \"out_id\": \"{64b40065-a40f-4b57-b157-d08fedbec40f}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{d5b34666-92be-4ab4-a0c7-62d75ff50c4d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{fe09216a-af44-40be-b4fd-8036ea6df5f5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{2454de9a-2827-4a3c-9b48-c33e6bf08527}\",\n            \"in_index\": 0,\n            \"out_id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"out_index\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"rotate image\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"# ---------------\\n# For rotating the image to make the image angle \\n# ---------------\\n\\nimport shutil\\nimport datetime\\nimport os\\nimport cv2\\nimport numpy as np\\nimport random\\nimport math\\nfrom PIL import Image, ImageDraw\\n\\n# Define a function to rotate the image\\ndef rotate_image(image, angle_deg):\\n    height, width = image.shape[:2]\\n    \\n    if abs(angle_deg) > 60:\\n        angle_deg = max(min(angle_deg, 30), -30)\\n        \\n    rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), angle_deg, 1)\\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))\\n    return rotated_image\\n\\ndef resize_image(image, target_size):\\n    resized_image = cv2.resize(image, target_size)\\n    return resized_image\\n\\ndef enhance_image_quality(image):\\n    # Apply image color\\n    #gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\\n    #enhanced_image = cv2.equalizeHist(gray_image)\\n\\n    # Apply image enhancement technique (e.g., sharpening)\\n    #kernel_sharpening = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])\\n    #enhance_image_quality = cv2.filter2D(image, -1, kernel_sharpening)\\n    enhance_image_quality = image\\n    return enhance_image_quality\\n\\n# Load the image\\nimage_path = payload['modifi_img_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the sorted corner coordinates\\ncorner_sort = []\\n\\n# Iterate over the corners and store the coordinates\\nfor i in range(len(data_corner)):\\n    x = data_corner[i]['x']  # Get the x coordinate of the starting corner\\n    y = data_corner[i]['y']  # Get the y coordinate of the starting corner\\n\\n    corner_sort.append((x, y))\\n\\n# Sort the corner coordinates based on the y value in descending order\\ncorner_sort.sort(key=lambda c:c[-1], reverse=True)\\n\\n# Check if there is only one corner coordinate\\nif len(corner_sort) >= 2:\\n    # Initialize variables\\n    get_start = ()\\n    get_end = ()\\n    diff = 0\\n    height, width = image.shape[:2]\\n\\n    # Show result in corner_sort[]\\n    for i, corner in enumerate(corner_sort):\\n        print(\\\"Corner {}: ({}, {})\\\".format(i+1, corner[0], corner[1]))\\n\\n        print(\\\"--------------------------------------\\\")\\n        # Iterate over all possible pairs of coordinates\\n        if len(corner_sort) >= 2:\\n            for i in range(len(corner_sort)):\\n                for j in range(i + 1, len(corner_sort)):  # Modify the inner loop range to avoid checking the same pair again\\n                    if abs(corner_sort[i][0] - corner_sort[j][0]) > 30 and abs(corner_sort[i][1] - corner_sort[j][1]) <= 10:\\n                        avg_y = (corner_sort[i][1] + corner_sort[j][1]) / 2\\n\\n                        print(\\\"Center of 2Y: {} + {} = {} / {}\\\".format(corner_sort[i][1], corner_sort[j][1], avg_y, (0.5 * height)))\\n\\n                        if avg_y < (0.5 * height):\\n                            if avg_y > diff:\\n                                get_start = corner_sort[i]\\n                                get_end = corner_sort[j]\\n\\n        print(\\\"--------------------------------------\\\")\\n\\n\\n    # Check if a valid pair was found\\n    if get_start and get_end:\\n        x1, y1 = get_start\\n        x2, y2 = get_end\\n        print(\\\"start: ({}, {})\\\".format(x1, y1))\\n        print(\\\"end: ({}, {})\\\".format(x2, y2))\\n        print(\\\"--------------------------------------\\\")\\n\\n        # Calculate the angle of the line\\n        angle_rad = math.atan2(y2 - y1, x2 - x1)\\n        angle_deg = math.degrees(angle_rad)\\n\\n        # Subtract 180 from angle_deg and set it to the new value if it exceeds 90 degrees\\n        if angle_deg > 90:\\n            angle_deg -= 180\\n        elif angle_deg < -90:\\n            angle_deg += 180\\n            \\n        # Draw a line on the image from corner 1 to corner 2\\n        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)\\n\\n        print(\\\"Angle of the line [{}, {}]: {} degrees\\\".format(get_start, get_end, angle_deg))\\n\\n        # Rotate the image if there are corner coordinates\\n        rotated_image = rotate_image(image, angle_deg)  # Specify the desired angle in degrees   \\n\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(rotated_image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate1.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n    else:\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate1.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n        print(\\\"No corner coordinates found.\\\")\\n\\nelse:\\n    # Resize the image to a target size\\n    target_size = (1440, 1920)\\n    resized_image = resize_image(image, target_size)\\n\\n    # Enhance the quality of the image\\n    enhanced_image = enhance_image_quality(resized_image)\\n\\n    # Save the modified image\\n    output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate1.jpg'\\n    cv2.imwrite(output_path, enhanced_image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    print(\\\"Error: Only one corner coordinate found.\\\")\\n    \\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_original1.jpg'\\n    \\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['modifi_img_path'] = output_path\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"# ---------------\\n# For rotating the image to make the image angle \\n# ---------------\\n\\nimport shutil\\nimport datetime\\nimport os\\nimport cv2\\nimport numpy as np\\nimport random\\nimport math\\nfrom PIL import Image, ImageDraw\\n\\n# Define a function to rotate the image\\ndef rotate_image(image, angle_deg):\\n    height, width = image.shape[:2]\\n    \\n    if abs(angle_deg) > 60:\\n        angle_deg = max(min(angle_deg, 30), -30)\\n        \\n    rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), angle_deg, 1)\\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))\\n    return rotated_image\\n\\ndef resize_image(image, target_size):\\n    resized_image = cv2.resize(image, target_size)\\n    return resized_image\\n\\ndef enhance_image_quality(image):\\n    # Apply image color\\n    #gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\\n    #enhanced_image = cv2.equalizeHist(gray_image)\\n\\n    # Apply image enhancement technique (e.g., sharpening)\\n    #kernel_sharpening = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])\\n    #enhance_image_quality = cv2.filter2D(image, -1, kernel_sharpening)\\n    enhance_image_quality = image\\n    return enhance_image_quality\\n\\n# Load the image\\nimage_path = payload['modifi_img_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the sorted corner coordinates\\ncorner_sort = []\\n\\n# Iterate over the corners and store the coordinates\\nfor i in range(len(data_corner)):\\n    x = data_corner[i]['x']  # Get the x coordinate of the starting corner\\n    y = data_corner[i]['y']  # Get the y coordinate of the starting corner\\n\\n    corner_sort.append((x, y))\\n\\n# Sort the corner coordinates based on the y value in descending order\\ncorner_sort.sort(key=lambda c:c[-1], reverse=True)\\n\\n# Check if there is only one corner coordinate\\nif len(corner_sort) >= 2:\\n    # Initialize variables\\n    get_start = ()\\n    get_end = ()\\n    diff = 0\\n    height, width = image.shape[:2]\\n\\n    # Show result in corner_sort[]\\n    for i, corner in enumerate(corner_sort):\\n        print(\\\"Corner {}: ({}, {})\\\".format(i+1, corner[0], corner[1]))\\n\\n        print(\\\"--------------------------------------\\\")\\n        # Iterate over all possible pairs of coordinates\\n        if len(corner_sort) >= 2:\\n            for i in range(len(corner_sort)):\\n                for j in range(i + 1, len(corner_sort)):  # Modify the inner loop range to avoid checking the same pair again\\n                    if abs(corner_sort[i][0] - corner_sort[j][0]) > 30 and abs(corner_sort[i][1] - corner_sort[j][1]) <= 10:\\n                        avg_y = (corner_sort[i][1] + corner_sort[j][1]) / 2\\n\\n                        print(\\\"Center of 2Y: {} + {} = {} / {}\\\".format(corner_sort[i][1], corner_sort[j][1], avg_y, (0.5 * height)))\\n\\n                        if avg_y < (0.5 * height):\\n                            if avg_y > diff:\\n                                get_start = corner_sort[i]\\n                                get_end = corner_sort[j]\\n\\n        print(\\\"--------------------------------------\\\")\\n\\n\\n    # Check if a valid pair was found\\n    if get_start and get_end:\\n        x1, y1 = get_start\\n        x2, y2 = get_end\\n        print(\\\"start: ({}, {})\\\".format(x1, y1))\\n        print(\\\"end: ({}, {})\\\".format(x2, y2))\\n        print(\\\"--------------------------------------\\\")\\n\\n        # Calculate the angle of the line\\n        angle_rad = math.atan2(y2 - y1, x2 - x1)\\n        angle_deg = math.degrees(angle_rad)\\n\\n        # Subtract 180 from angle_deg and set it to the new value if it exceeds 90 degrees\\n        if angle_deg > 90:\\n            angle_deg -= 180\\n        elif angle_deg < -90:\\n            angle_deg += 180\\n            \\n        # Draw a line on the image from corner 1 to corner 2\\n        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)\\n\\n        print(\\\"Angle of the line [{}, {}]: {} degrees\\\".format(get_start, get_end, angle_deg))\\n\\n        # Rotate the image if there are corner coordinates\\n        rotated_image = rotate_image(image, angle_deg)  # Specify the desired angle in degrees   \\n\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(rotated_image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate1.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n    else:\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate1.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n        print(\\\"No corner coordinates found.\\\")\\n\\nelse:\\n    # Resize the image to a target size\\n    target_size = (1440, 1920)\\n    resized_image = resize_image(image, target_size)\\n\\n    # Enhance the quality of the image\\n    enhanced_image = enhance_image_quality(resized_image)\\n\\n    # Save the modified image\\n    output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate1.jpg'\\n    cv2.imwrite(output_path, enhanced_image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    print(\\\"Error: Only one corner coordinate found.\\\")\\n    \\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_original1.jpg'\\n    \\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['modifi_img_path'] = output_path\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 47.65254999999997,\n                \"y\": 957.3365999999993\n            }\n        },\n        {\n            \"id\": \"{968d2c17-587c-446d-9574-f2fc0c0b2fa7}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_save\": true,\n                    \"jpg\": true,\n                    \"name\": \"TempImage_original1\",\n                    \"path\": \"C:/CiRA-CORE/[Project]/logs/image\",\n                    \"png\": false,\n                    \"use_custom_name\": true,\n                    \"use_fixed_name\": true,\n                    \"use_payload_name\": false\n                },\n                \"name\": \"ImageCapture\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -573.2036199999995,\n                \"y\": 955.5853999999995\n            }\n        },\n        {\n            \"id\": \"{9739196d-15a4-46b0-bc5f-4f2bf45d7212}\",\n            \"model\": {\n                \"height\": 407,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 293\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 956.254678199999,\n                \"y\": 1538.7595316999993\n            }\n        },\n        {\n            \"id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"filp image\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"# for first step to check image if the image needs to be rotated 90 or 180 degrees\\n\\nimport cv2\\nimport os\\n\\n# Load the image\\nimage_path = payload['ImageCapture']['image_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the corner coordinates\\ncorner_sort = []\\n\\n# Check if data_corner is empty\\nif len(data_corner) != 0:\\n    # Iterate over the corners and store the coordinates\\n    for i in range(len(data_corner)):\\n        x = data_corner[i]['x']  # Get the x coordinate of the corner\\n        y = data_corner[i]['y']  # Get the y coordinate of the corner\\n        corner_sort.append((x, y))\\n    \\n    # Find the min&max position x, y of corner\\n    min_x = min(corner_sort, key=lambda corner: corner[0])[0]\\n    max_y = max(corner_sort, key=lambda corner: corner[1])[1]\\n\\n    # Calculate the height and width of the image\\n    height, width = image.shape[:2]\\n\\n    output_path = r\\\"C:/CiRA-CORE/[Project]/logs/image/TempImage_flip1.jpg\\\"\\n\\n    print(\\\"Min X: {}\\\".format(min_x))\\n    print(\\\"Max Y: {}\\\".format(max_y))\\n    print(\\\"58% H: {}\\\".format(0.58 * height))\\n    print(\\\"50% w: {}\\\".format(0.50 * width))\\n    print(\\\"--------------------------------------\\\")\\n\\n    if width < height and max_y > (0.58 * height):\\n        # Save the modified image\\n        print(\\\"rotate: 180\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_180)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x < (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_CLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x > (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_COUNTERCLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    else:\\n        # Save the modified image\\n        cv2.imwrite(output_path, image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['modifi_img_path'] = output_path\\n\\nelse :\\n payload['modifi_img_path'] = payload['ImageCapture']['image_path']\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"# for first step to check image if the image needs to be rotated 90 or 180 degrees\\n\\nimport cv2\\nimport os\\n\\n# Load the image\\nimage_path = payload['ImageCapture']['image_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the corner coordinates\\ncorner_sort = []\\n\\n# Check if data_corner is empty\\nif len(data_corner) != 0:\\n    # Iterate over the corners and store the coordinates\\n    for i in range(len(data_corner)):\\n        x = data_corner[i]['x']  # Get the x coordinate of the corner\\n        y = data_corner[i]['y']  # Get the y coordinate of the corner\\n        corner_sort.append((x, y))\\n    \\n    # Find the min&max position x, y of corner\\n    min_x = min(corner_sort, key=lambda corner: corner[0])[0]\\n    max_y = max(corner_sort, key=lambda corner: corner[1])[1]\\n\\n    # Calculate the height and width of the image\\n    height, width = image.shape[:2]\\n\\n    output_path = r\\\"C:/CiRA-CORE/[Project]/logs/image/TempImage_flip1.jpg\\\"\\n\\n    print(\\\"Min X: {}\\\".format(min_x))\\n    print(\\\"Max Y: {}\\\".format(max_y))\\n    print(\\\"58% H: {}\\\".format(0.58 * height))\\n    print(\\\"50% w: {}\\\".format(0.50 * width))\\n    print(\\\"--------------------------------------\\\")\\n\\n    if width < height and max_y > (0.58 * height):\\n        # Save the modified image\\n        print(\\\"rotate: 180\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_180)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x < (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_CLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x > (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_COUNTERCLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    else:\\n        # Save the modified image\\n        cv2.imwrite(output_path, image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['modifi_img_path'] = output_path\\n\\nelse :\\n payload['modifi_img_path'] = payload['ImageCapture']['image_path']\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -264.41878008926994,\n                \"y\": 958.7621340892694\n            }\n        },\n        {\n            \"id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"meter_corner\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,255,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,0,255\",\n                            \"filled\": false,\n                            \"name\": \"corner\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -417.83153000000004,\n                \"y\": 955.3260899999995\n            }\n        },\n        {\n            \"id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"meter_corner\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,0\",\n                            \"filled\": false,\n                            \"name\": \"corner\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -115.36146636773441,\n                \"y\": 956.2305225462735\n            }\n        },\n        {\n            \"id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 1,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 1,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": true,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"number_digi\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 1\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,255\",\n                            \"filled\": false,\n                            \"name\": \"0\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"182,255,0\",\n                            \"filled\": false,\n                            \"name\": \"1\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,109,255\",\n                            \"filled\": false,\n                            \"name\": \"2\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,218,0\",\n                            \"filled\": false,\n                            \"name\": \"3\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,219,255\",\n                            \"filled\": false,\n                            \"name\": \"4\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,108,0\",\n                            \"filled\": false,\n                            \"name\": \"5\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,181\",\n                            \"filled\": false,\n                            \"name\": \"6\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,1\",\n                            \"filled\": false,\n                            \"name\": \"7\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,71\",\n                            \"filled\": false,\n                            \"name\": \"8\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,110\",\n                            \"filled\": false,\n                            \"name\": \"9\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -577.2725972809912,\n                \"y\": 370.53706999999963\n            }\n        },\n        {\n            \"id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": true,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 5,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 5,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 1,\n                    \"rect_thickness_2\": 3,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"dial_crop\",\n                    \"this_config_name_2\": \"pointer_dial\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,255\",\n                            \"filled\": true,\n                            \"name\": \"dial\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,0\",\n                            \"filled\": false,\n                            \"name\": \"pointer\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -571.5409699999988,\n                \"y\": 498.2246790909084\n            }\n        },\n        {\n            \"id\": \"{3a830103-0670-4f11-8bff-a216976cb174}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\nelse:\\n    number_digi = None\\n\\npayload.clear()\\npayload['num'] = number_digi\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\nelse:\\n    number_digi = None\\n\\npayload.clear()\\npayload['num'] = number_digi\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 376.6729999999999,\n                \"y\": 1553.2769999999996\n            }\n        },\n        {\n            \"id\": \"{feae2584-4b0d-4af6-b3c7-44efe94224b7}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 377.29071709999994,\n                \"y\": 1670.3094342\n            }\n        },\n        {\n            \"id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"get data number\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\n    \\n    \\npayload.clear()\\npayload['num'] = number_digi\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\n    \\n    \\npayload.clear()\\npayload['num'] = number_digi\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -421.33619444983145,\n                \"y\": 372.0766429868175\n            }\n        },\n        {\n            \"id\": \"{fe09216a-af44-40be-b4fd-8036ea6df5f5}\",\n            \"model\": {\n                \"name\": \"PayloadCombine\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -91.79906999999994,\n                \"y\": 462.2163699999997\n            }\n        },\n        {\n            \"id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -421.3433814876019,\n                \"y\": 498.1063366115697\n            }\n        },\n        {\n            \"id\": \"{492ccc69-fba7-4067-a75f-c51c58b1fbb2}\",\n            \"model\": {\n                \"data\": {\n                    \"current_index\": 33,\n                    \"images_count\": 100,\n                    \"images_dir\": \"C:/CiRA-CORE/[Project]/assets/Test\",\n                    \"loop\": true\n                },\n                \"name\": \"ImageSlide\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 201.98906310000038,\n                \"y\": 839.2188760999996\n            }\n        },\n        {\n            \"id\": \"{a7b408c0-861c-4e2c-82c3-d4260327a034}\",\n            \"model\": {\n                \"height\": 405,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 570,\n                \"width\": 285\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 611.1941485100004,\n                \"y\": 385.2217334899998\n            }\n        },\n        {\n            \"id\": \"{88773735-d9a9-4381-a3a6-ac1aecd32ec8}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"# for first step to check image if the image needs to be rotated 90 or 180 degrees\\n\\nimport cv2\\nimport os\\n\\n# Load the image\\nimage_path = payload['ImageCapture']['image_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the corner coordinates\\ncorner_sort = []\\n\\n# Check if data_corner is empty\\nif len(data_corner) != 0:\\n    # Iterate over the corners and store the coordinates\\n    for i in range(len(data_corner)):\\n        x = data_corner[i]['x']  # Get the x coordinate of the corner\\n        y = data_corner[i]['y']  # Get the y coordinate of the corner\\n        corner_sort.append((x, y))\\n    \\n    # Find the min&max position x, y of corner\\n    min_x = min(corner_sort, key=lambda corner: corner[0])[0]\\n    max_y = max(corner_sort, key=lambda corner: corner[1])[1]\\n\\n    # Calculate the height and width of the image\\n    height, width = image.shape[:2]\\n\\n    output_path = r\\\"C:/CiRA-CORE/[Project]/logs/image/TempImage_flip2.jpg\\\"\\n\\n    print(\\\"Min X: {}\\\".format(min_x))\\n    print(\\\"Max Y: {}\\\".format(max_y))\\n    print(\\\"58% H: {}\\\".format(0.58 * height))\\n    print(\\\"50% w: {}\\\".format(0.50 * width))\\n    print(\\\"--------------------------------------\\\")\\n\\n    if width < height and max_y > (0.58 * height):\\n        # Save the modified image\\n        print(\\\"rotate: 180\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_180)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x < (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_CLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x > (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_COUNTERCLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    else:\\n        # Save the modified image\\n        cv2.imwrite(output_path, image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['modifi_img_path'] = output_path\\n\\nelse :\\n payload['modifi_img_path'] = payload['ImageCapture']['image_path']\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"# for first step to check image if the image needs to be rotated 90 or 180 degrees\\n\\nimport cv2\\nimport os\\n\\n# Load the image\\nimage_path = payload['ImageCapture']['image_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the corner coordinates\\ncorner_sort = []\\n\\n# Check if data_corner is empty\\nif len(data_corner) != 0:\\n    # Iterate over the corners and store the coordinates\\n    for i in range(len(data_corner)):\\n        x = data_corner[i]['x']  # Get the x coordinate of the corner\\n        y = data_corner[i]['y']  # Get the y coordinate of the corner\\n        corner_sort.append((x, y))\\n    \\n    # Find the min&max position x, y of corner\\n    min_x = min(corner_sort, key=lambda corner: corner[0])[0]\\n    max_y = max(corner_sort, key=lambda corner: corner[1])[1]\\n\\n    # Calculate the height and width of the image\\n    height, width = image.shape[:2]\\n\\n    output_path = r\\\"C:/CiRA-CORE/[Project]/logs/image/TempImage_flip2.jpg\\\"\\n\\n    print(\\\"Min X: {}\\\".format(min_x))\\n    print(\\\"Max Y: {}\\\".format(max_y))\\n    print(\\\"58% H: {}\\\".format(0.58 * height))\\n    print(\\\"50% w: {}\\\".format(0.50 * width))\\n    print(\\\"--------------------------------------\\\")\\n\\n    if width < height and max_y > (0.58 * height):\\n        # Save the modified image\\n        print(\\\"rotate: 180\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_180)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x < (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_CLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x > (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_COUNTERCLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    else:\\n        # Save the modified image\\n        cv2.imwrite(output_path, image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['modifi_img_path'] = output_path\\n\\nelse :\\n payload['modifi_img_path'] = payload['ImageCapture']['image_path']\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -256.8829999999999,\n                \"y\": 1547.9529999999993\n            }\n        },\n        {\n            \"id\": \"{588c7f0d-4ca7-4971-bbcf-4a0fcf39866e}\",\n            \"model\": {\n                \"height\": 407,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 288\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 951.0322425999998,\n                \"y\": 383.6678841599998\n            }\n        },\n        {\n            \"id\": \"{7e2d2d04-7695-4878-8802-c47f698f2127}\",\n            \"model\": {\n                \"height\": 83,\n                \"label\": {\n                    \"bold\": false,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"text = payload.num\\n\\nlabel = text\",\n                    \"size\": 18,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 104\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1361.4098924800003,\n                \"y\": 445.80765767999975\n            }\n        },\n        {\n            \"id\": \"{d5b34666-92be-4ab4-a0c7-62d75ff50c4d}\",\n            \"model\": {\n                \"height\": 83,\n                \"label\": {\n                    \"bold\": false,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"text = payload.dial\\n\\nlabel = text\",\n                    \"size\": 18,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 104\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1358.41758657,\n                \"y\": 555.3409998399999\n            }\n        },\n        {\n            \"id\": \"{2454de9a-2827-4a3c-9b48-c33e6bf08527}\",\n            \"model\": {\n                \"height\": 490,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 334\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -272.855,\n                \"y\": 1135.343\n            }\n        },\n        {\n            \"id\": \"{406f25f2-4055-4e18-a69b-e6e5b7009d66}\",\n            \"model\": {\n                \"height\": 87,\n                \"label\": {\n                    \"bold\": true,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"num = payload.num\\ndial = payload.dial\\ntext= num + \\\".\\\" + dial\\n\\nlabel = text\",\n                    \"size\": 20,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 174\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1360.5047641899996,\n                \"y\": 667.4512663499994\n            }\n        },\n        {\n            \"id\": \"{56771f03-8648-49e6-9c63-f1a1870d0211}\",\n            \"model\": {\n                \"height\": 408,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 293\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 612.8606287454546,\n                \"y\": 955.824736736364\n            }\n        },\n        {\n            \"id\": \"{0d1d75b3-a84c-4955-abc1-63603832ae24}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": true,\n                    \"text_drawing_2\": true,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"meter_corner\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -105.14899999999996,\n                \"y\": 1550.6149999999993\n            }\n        },\n        {\n            \"id\": \"{cd15e53e-2f01-404a-ac4b-542abcaa5c69}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 4.5,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 5,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 10,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": true,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"number_digi\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 5\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,255\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,255\",\n                            \"filled\": false,\n                            \"name\": \"0\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"182,255,0\",\n                            \"filled\": false,\n                            \"name\": \"1\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,109,255\",\n                            \"filled\": false,\n                            \"name\": \"2\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,218,0\",\n                            \"filled\": false,\n                            \"name\": \"3\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,219,255\",\n                            \"filled\": false,\n                            \"name\": \"4\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,108,0\",\n                            \"filled\": false,\n                            \"name\": \"5\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,181\",\n                            \"filled\": false,\n                            \"name\": \"6\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,1\",\n                            \"filled\": false,\n                            \"name\": \"7\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,71\",\n                            \"filled\": false,\n                            \"name\": \"8\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,110\",\n                            \"filled\": false,\n                            \"name\": \"9\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 251.56166200000004,\n                \"y\": 956.6429400000002\n            }\n        },\n        {\n            \"id\": \"{fadd0b2a-d532-442c-8d6d-55a175035103}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": true,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 19,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"dial_crop\",\n                    \"this_config_name_2\": \"pointer_dial\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,127\",\n                            \"filled\": true,\n                            \"name\": \"dial\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,85,0\",\n                            \"filled\": false,\n                            \"name\": \"pointer\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 248.0185400000001,\n                \"y\": 1103.6825030000002\n            }\n        },\n        {\n            \"id\": \"{64b40065-a40f-4b57-b157-d08fedbec40f}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\n    \\n    \\npayload.clear()\\npayload['num'] = number_digi\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\n    \\n    \\npayload.clear()\\npayload['num'] = number_digi\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 395.0581030000002,\n                \"y\": 956.6429400000002\n            }\n        },\n        {\n            \"id\": \"{72531559-9ee2-4bca-ab29-1ab83bba3229}\",\n            \"model\": {\n                \"height\": 83,\n                \"label\": {\n                    \"bold\": false,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"text = payload.dial\\n\\nlabel = text\",\n                    \"size\": 18,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 104\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1341.6002170999989,\n                \"y\": 1690.0560170999984\n            }\n        },\n        {\n            \"id\": \"{b77c82a0-7725-4d1d-a642-1ee90bd7724e}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 395.0581030000001,\n                \"y\": 1105.4540640000002\n            }\n        },\n        {\n            \"id\": \"{f5779cab-a930-4118-bbfc-df8f0974bf71}\",\n            \"model\": {\n                \"height\": 408,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 286\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 957.8449661000002,\n                \"y\": 954.8713789999999\n            }\n        },\n        {\n            \"id\": \"{3504846f-0b73-4190-87c2-b5a1677988d8}\",\n            \"model\": {\n                \"name\": \"PayloadCombine\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 516.6699999999994,\n                \"y\": 1047.859999999999\n            }\n        },\n        {\n            \"id\": \"{16804e1f-675a-46a1-a827-6d103e4c73a2}\",\n            \"model\": {\n                \"height\": 83,\n                \"label\": {\n                    \"bold\": false,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"text = payload.num\\n\\nlabel = text\",\n                    \"size\": 18,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 104\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1344.2663431999997,\n                \"y\": 978.3233327999993\n            }\n        },\n        {\n            \"id\": \"{99cb2d68-fc87-4409-95d7-d4750f522386}\",\n            \"model\": {\n                \"height\": 83,\n                \"label\": {\n                    \"bold\": false,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"text = payload.dial\\n\\nlabel = text\",\n                    \"size\": 18,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 104\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1344.0891871,\n                \"y\": 1085.4266400999998\n            }\n        },\n        {\n            \"id\": \"{9d4cb57e-dad9-4644-9bd8-d42eb54d2cc8}\",\n            \"model\": {\n                \"height\": 91,\n                \"label\": {\n                    \"bold\": true,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"num = payload.num\\ndial = payload.dial\\ntext= num + \\\".\\\" + dial\\n\\nlabel = text\",\n                    \"size\": 20,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 171\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1349.3204164,\n                \"y\": 1193.3425228999997\n            }\n        },\n        {\n            \"id\": \"{d0df80da-3f8d-4ce9-b409-cdd4d4d36bc9}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_save\": true,\n                    \"jpg\": true,\n                    \"name\": \"TempImage_original2\",\n                    \"path\": \"C:/CiRA-CORE/[Project]/logs/image\",\n                    \"png\": false,\n                    \"use_custom_name\": true,\n                    \"use_fixed_name\": true,\n                    \"use_payload_name\": false\n                },\n                \"name\": \"ImageCapture\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -561.584837,\n                \"y\": 1550.1158749999995\n            }\n        },\n        {\n            \"id\": \"{9c35af66-8ed0-4025-98a0-91bf863bea93}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": true,\n                    \"text_drawing_2\": true,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"meter_corner\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -412.6099999999998,\n                \"y\": 1543.9599999999994\n            }\n        },\n        {\n            \"id\": \"{b8a07e5c-f5b5-4eb0-92de-08f582e8f3fb}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"# ---------------\\n# For rotating the image to make the image angle \\n# ---------------\\n\\nimport shutil\\nimport datetime\\nimport os\\nimport cv2\\nimport numpy as np\\nimport random\\nimport math\\nfrom PIL import Image, ImageDraw\\n\\n# Define a function to rotate the image\\ndef rotate_image(image, angle_deg):\\n    height, width = image.shape[:2]\\n    \\n    if abs(angle_deg) > 60:\\n        angle_deg = max(min(angle_deg, 30), -30)\\n        \\n    rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), angle_deg, 1)\\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))\\n    return rotated_image\\n\\ndef resize_image(image, target_size):\\n    resized_image = image\\n    return resized_image\\n\\ndef enhance_image_quality(image):\\n    # Apply image color\\n    #gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\\n    #enhanced_image = cv2.equalizeHist(gray_image)\\n\\n    # Apply image enhancement technique (e.g., sharpening)\\n    #kernel_sharpening = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])\\n    #enhance_image_quality = cv2.filter2D(image, -1, kernel_sharpening)\\n    enhance_image_quality = image\\n    return enhance_image_quality\\n\\n# Load the image\\nimage_path = payload['modifi_img_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the sorted corner coordinates\\ncorner_sort = []\\n\\n# Iterate over the corners and store the coordinates\\nfor i in range(len(data_corner)):\\n    x = data_corner[i]['x']  # Get the x coordinate of the starting corner\\n    y = data_corner[i]['y']  # Get the y coordinate of the starting corner\\n\\n    corner_sort.append((x, y))\\n\\n# Sort the corner coordinates based on the y value in descending order\\ncorner_sort.sort(key=lambda c:c[-1], reverse=True)\\n\\n# Check if there is only one corner coordinate\\nif len(corner_sort) >= 2:\\n    # Initialize variables\\n    get_start = ()\\n    get_end = ()\\n    diff = 0\\n    height, width = image.shape[:2]\\n\\n    # Show result in corner_sort[]\\n    for i, corner in enumerate(corner_sort):\\n        print(\\\"Corner {}: ({}, {})\\\".format(i+1, corner[0], corner[1]))\\n    print(\\\"--------------------------------------\\\")\\n\\n    # Iterate over all possible pairs of coordinates\\n    if len(corner_sort) >= 2:\\n        for i in range(len(corner_sort)):\\n            for j in range(i, len(corner_sort)):\\n                if corner_sort[i] != corner_sort[j]:\\n                    if abs(corner_sort[i][0] - corner_sort[j][0]) > 30:\\n                        if abs(corner_sort[i][1] - corner_sort[j][1]) <= 40:\\n                            avg_y = abs((corner_sort[i][1]+corner_sort[j][1])/2)\\n                            print(\\\"Center of 2Y: {} + {} = {} / {}\\\".format(corner_sort[i][1], corner_sort[j][1], avg_y, (0.5*height)))\\n                            if avg_y < (0.5*height):\\n                                if (avg_y > diff):\\n                                    get_start = corner_sort[i]\\n                                    get_end = corner_sort[j]\\n    print(\\\"--------------------------------------\\\")\\n\\n\\n    # Check if a valid pair was found\\n    if get_start and get_end:\\n        x1, y1 = get_start\\n        x2, y2 = get_end\\n        print(\\\"start: ({}, {})\\\".format(x1, y1))\\n        print(\\\"end: ({}, {})\\\".format(x2, y2))\\n        print(\\\"--------------------------------------\\\")\\n\\n        # Calculate the angle of the line\\n        angle_rad = math.atan2(y2 - y1, x2 - x1)\\n        angle_deg = math.degrees(angle_rad)\\n\\n        # Subtract 180 from angle_deg and set it to the new value if it exceeds 90 degrees\\n        if angle_deg > 90:\\n            angle_deg -= 180\\n        elif angle_deg < -90:\\n            angle_deg += 180\\n            \\n        # Draw a line on the image from corner 1 to corner 2\\n        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)\\n\\n        print(\\\"Angle of the line [{}, {}]: {} degrees\\\".format(get_start, get_end, angle_deg))\\n\\n        # Rotate the image if there are corner coordinates\\n        rotated_image = rotate_image(image, angle_deg)  # Specify the desired angle in degrees   \\n\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(rotated_image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate2.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n    else:\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate2.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n        print(\\\"No corner coordinates found.\\\")\\n\\nelse:\\n    # Resize the image to a target size\\n    target_size = (1440, 1920)\\n    resized_image = resize_image(image, target_size)\\n\\n    # Enhance the quality of the image\\n    enhanced_image = enhance_image_quality(resized_image)\\n\\n    # Save the modified image\\n    output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate2.jpg'\\n    cv2.imwrite(output_path, enhanced_image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    print(\\\"Error: Only one corner coordinate found.\\\")\\n    \\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_original2.jpg'\\n    \\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['modifi_img_path'] = output_path\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"# ---------------\\n# For rotating the image to make the image angle \\n# ---------------\\n\\nimport shutil\\nimport datetime\\nimport os\\nimport cv2\\nimport numpy as np\\nimport random\\nimport math\\nfrom PIL import Image, ImageDraw\\n\\n# Define a function to rotate the image\\ndef rotate_image(image, angle_deg):\\n    height, width = image.shape[:2]\\n    \\n    if abs(angle_deg) > 60:\\n        angle_deg = max(min(angle_deg, 30), -30)\\n        \\n    rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), angle_deg, 1)\\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))\\n    return rotated_image\\n\\ndef resize_image(image, target_size):\\n    resized_image = image\\n    return resized_image\\n\\ndef enhance_image_quality(image):\\n    # Apply image color\\n    #gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\\n    #enhanced_image = cv2.equalizeHist(gray_image)\\n\\n    # Apply image enhancement technique (e.g., sharpening)\\n    #kernel_sharpening = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])\\n    #enhance_image_quality = cv2.filter2D(image, -1, kernel_sharpening)\\n    enhance_image_quality = image\\n    return enhance_image_quality\\n\\n# Load the image\\nimage_path = payload['modifi_img_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the sorted corner coordinates\\ncorner_sort = []\\n\\n# Iterate over the corners and store the coordinates\\nfor i in range(len(data_corner)):\\n    x = data_corner[i]['x']  # Get the x coordinate of the starting corner\\n    y = data_corner[i]['y']  # Get the y coordinate of the starting corner\\n\\n    corner_sort.append((x, y))\\n\\n# Sort the corner coordinates based on the y value in descending order\\ncorner_sort.sort(key=lambda c:c[-1], reverse=True)\\n\\n# Check if there is only one corner coordinate\\nif len(corner_sort) >= 2:\\n    # Initialize variables\\n    get_start = ()\\n    get_end = ()\\n    diff = 0\\n    height, width = image.shape[:2]\\n\\n    # Show result in corner_sort[]\\n    for i, corner in enumerate(corner_sort):\\n        print(\\\"Corner {}: ({}, {})\\\".format(i+1, corner[0], corner[1]))\\n    print(\\\"--------------------------------------\\\")\\n\\n    # Iterate over all possible pairs of coordinates\\n    if len(corner_sort) >= 2:\\n        for i in range(len(corner_sort)):\\n            for j in range(i, len(corner_sort)):\\n                if corner_sort[i] != corner_sort[j]:\\n                    if abs(corner_sort[i][0] - corner_sort[j][0]) > 30:\\n                        if abs(corner_sort[i][1] - corner_sort[j][1]) <= 40:\\n                            avg_y = abs((corner_sort[i][1]+corner_sort[j][1])/2)\\n                            print(\\\"Center of 2Y: {} + {} = {} / {}\\\".format(corner_sort[i][1], corner_sort[j][1], avg_y, (0.5*height)))\\n                            if avg_y < (0.5*height):\\n                                if (avg_y > diff):\\n                                    get_start = corner_sort[i]\\n                                    get_end = corner_sort[j]\\n    print(\\\"--------------------------------------\\\")\\n\\n\\n    # Check if a valid pair was found\\n    if get_start and get_end:\\n        x1, y1 = get_start\\n        x2, y2 = get_end\\n        print(\\\"start: ({}, {})\\\".format(x1, y1))\\n        print(\\\"end: ({}, {})\\\".format(x2, y2))\\n        print(\\\"--------------------------------------\\\")\\n\\n        # Calculate the angle of the line\\n        angle_rad = math.atan2(y2 - y1, x2 - x1)\\n        angle_deg = math.degrees(angle_rad)\\n\\n        # Subtract 180 from angle_deg and set it to the new value if it exceeds 90 degrees\\n        if angle_deg > 90:\\n            angle_deg -= 180\\n        elif angle_deg < -90:\\n            angle_deg += 180\\n            \\n        # Draw a line on the image from corner 1 to corner 2\\n        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)\\n\\n        print(\\\"Angle of the line [{}, {}]: {} degrees\\\".format(get_start, get_end, angle_deg))\\n\\n        # Rotate the image if there are corner coordinates\\n        rotated_image = rotate_image(image, angle_deg)  # Specify the desired angle in degrees   \\n\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(rotated_image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate2.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n    else:\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate2.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n        print(\\\"No corner coordinates found.\\\")\\n\\nelse:\\n    # Resize the image to a target size\\n    target_size = (1440, 1920)\\n    resized_image = resize_image(image, target_size)\\n\\n    # Enhance the quality of the image\\n    enhanced_image = enhance_image_quality(resized_image)\\n\\n    # Save the modified image\\n    output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate2.jpg'\\n    cv2.imwrite(output_path, enhanced_image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    print(\\\"Error: Only one corner coordinate found.\\\")\\n    \\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_original2.jpg'\\n    \\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['modifi_img_path'] = output_path\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 37.268,\n                \"y\": 1550.6149999999998\n            }\n        },\n        {\n            \"id\": \"{5b7a6db7-3f5f-4c01-80ed-b1cd0bb81ec9}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 1,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 1,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": true,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"number_digi\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 1\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"85,170,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,255\",\n                            \"filled\": false,\n                            \"name\": \"0\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"182,255,0\",\n                            \"filled\": false,\n                            \"name\": \"1\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,109,255\",\n                            \"filled\": false,\n                            \"name\": \"2\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,218,0\",\n                            \"filled\": false,\n                            \"name\": \"3\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,219,255\",\n                            \"filled\": false,\n                            \"name\": \"4\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,108,0\",\n                            \"filled\": false,\n                            \"name\": \"5\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,181\",\n                            \"filled\": false,\n                            \"name\": \"6\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,1\",\n                            \"filled\": false,\n                            \"name\": \"7\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,71\",\n                            \"filled\": false,\n                            \"name\": \"8\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,110\",\n                            \"filled\": false,\n                            \"name\": \"9\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 240.63148999999993,\n                \"y\": 1554.1155299999994\n            }\n        },\n        {\n            \"id\": \"{2eeafae2-967e-413f-b62c-e7d7d14cde4b}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": true,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_digi\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_digi\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 3,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": false,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"dial_crop\",\n                    \"this_config_name_2\": \"pointer_dial\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,170,255\",\n                            \"filled\": true,\n                            \"name\": \"dial\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,0\",\n                            \"filled\": false,\n                            \"name\": \"pointer\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 238.2489999999999,\n                \"y\": 1663.7499999999993\n            }\n        },\n        {\n            \"id\": \"{9c29ed9f-dc55-4887-ba1a-cbc5d85385ae}\",\n            \"model\": {\n                \"height\": 99,\n                \"label\": {\n                    \"bold\": true,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"num = payload.num\\ndial = payload.dial\\ntext= num + \\\".\\\" + dial\\n\\nlabel = text\",\n                    \"size\": 20,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 211\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1344.0437999999986,\n                \"y\": 1805.2455486999988\n            }\n        },\n        {\n            \"id\": \"{692931a4-0d60-4815-80bc-36ef474bec1d}\",\n            \"model\": {\n                \"height\": 407,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 289\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 601.6119999999996,\n                \"y\": 1541.2979999999993\n            }\n        },\n        {\n            \"id\": \"{e1c40e00-f9ef-48fc-bfd9-f8dd7be6d16f}\",\n            \"model\": {\n                \"flow_data_name\": \"img\",\n                \"name\": \"FlowDataGet\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -950.2009000000003,\n                \"y\": 1144.9262000000003\n            }\n        },\n        {\n            \"id\": \"{86ebbce9-a86e-499f-b590-eeed334e3049}\",\n            \"model\": {\n                \"flow_data_name\": \"img\",\n                \"name\": \"FlowDataSet\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 348.00627290000034,\n                \"y\": 839.3386550999999\n            }\n        },\n        {\n            \"id\": \"{9468a5af-6e5b-42a9-ab82-9eca1851bb81}\",\n            \"model\": {\n                \"height\": 83,\n                \"label\": {\n                    \"bold\": false,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"text = payload.num\\n\\nlabel = text\",\n                    \"size\": 18,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 104\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 1339.166882899999,\n                \"y\": 1576.320336799999\n            }\n        },\n        {\n            \"id\": \"{9453645c-2278-4751-8704-973d72912e8b}\",\n            \"model\": {\n                \"name\": \"PayloadCombine\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 527.0759999999997,\n                \"y\": 1631.805999999999\n            }\n        }\n    ],\n    \"scene_data\": {\n        \"flow_view_pos_x\": 584.2278043717045,\n        \"flow_view_pos_y\": 1083.3507726663524,\n        \"flow_view_zoom_factor\": 0.6209213230591554\n    }\n}\n",
            "name": "Main"
        }
    ]
}
