{
    "scene_array": [
        {
            "data": "{\n    \"connections\": [\n        {\n            \"in_id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{1e5d7976-e374-44c8-b7d2-5133bbf2c308}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{0908b9f0-750b-43be-873c-82b927bc2103}\",\n            \"in_index\": 0,\n            \"out_id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{cebb2029-6204-4f93-8161-d3391d5af87a}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f3393d2b-265a-4491-9831-3ae349e6a231}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{906f17ab-11c5-4ace-a65d-0a7e1a45e015}\",\n            \"in_index\": 0,\n            \"out_id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{22002a39-ba67-47af-b16c-c38ec286849c}\",\n            \"in_index\": 0,\n            \"out_id\": \"{cebb2029-6204-4f93-8161-d3391d5af87a}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{60667a70-e5f7-4b70-9723-b370a4eb889d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{0908b9f0-750b-43be-873c-82b927bc2103}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{4f8f5e98-3f8d-48fd-95d2-33bdc819df45}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{294dca87-7159-4840-973f-cbfb46c00608}\",\n            \"in_index\": 0,\n            \"out_id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{7eb49acd-d30c-4cde-8011-2b0cd05cb221}\",\n            \"in_index\": 0,\n            \"out_id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"in_index\": 0,\n            \"out_id\": \"{8fa2fad4-e9e0-4e42-aceb-b3cf8e2d0430}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{dda5c47e-fa31-4518-bab3-30e73ad5b158}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{8fa2fad4-e9e0-4e42-aceb-b3cf8e2d0430}\",\n            \"in_index\": 0,\n            \"out_id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"in_index\": 0,\n            \"out_id\": \"{413f0a11-c603-418b-a8d1-bace5c2c9ee5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{e42421d1-de63-46de-932b-9d78ae905aae}\",\n            \"in_index\": 0,\n            \"out_id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"in_index\": 0,\n            \"out_id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"in_index\": 0,\n            \"out_id\": \"{968d2c17-587c-446d-9574-f2fc0c0b2fa7}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{0908b9f0-750b-43be-873c-82b927bc2103}\",\n            \"in_index\": 1,\n            \"out_id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{968d2c17-587c-446d-9574-f2fc0c0b2fa7}\",\n            \"in_index\": 0,\n            \"out_id\": \"{1a617b7a-2732-4650-80a2-c37721f69e9a}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{f3393d2b-265a-4491-9831-3ae349e6a231}\",\n            \"in_index\": 0,\n            \"out_id\": \"{ebdb59b3-83c6-4c6a-86d5-7d8efaeb1d0d}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{9869eab2-9bee-4cc0-8337-0356b09cb0e6}\",\n            \"in_index\": 0,\n            \"out_id\": \"{1e5d7976-e374-44c8-b7d2-5133bbf2c308}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{167c08a4-5938-4ed5-aa67-b66324236447}\",\n            \"in_index\": 0,\n            \"out_id\": \"{e495b75f-d5d5-4a35-af43-4e5c2be42429}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{e11d0d65-291f-4178-91ca-f62301fee0f8}\",\n            \"in_index\": 0,\n            \"out_id\": \"{1e5d7976-e374-44c8-b7d2-5133bbf2c308}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{ebdb59b3-83c6-4c6a-86d5-7d8efaeb1d0d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{247a3a0a-ec79-43d4-983d-3660a51ba59e}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{218a42fc-ae6b-466b-bea7-5777cfc7981e}\",\n            \"in_index\": 0,\n            \"out_id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{413f0a11-c603-418b-a8d1-bace5c2c9ee5}\",\n            \"in_index\": 0,\n            \"out_id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{aa388581-d8a4-4ced-a53c-08b367bb1cb8}\",\n            \"in_index\": 0,\n            \"out_id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"in_index\": 0,\n            \"out_id\": \"{a9ffcd58-fecc-40c7-ab29-4ddf573beb6a}\",\n            \"out_index\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"id\": \"{968d2c17-587c-446d-9574-f2fc0c0b2fa7}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_save\": true,\n                    \"jpg\": true,\n                    \"name\": \"TempImage_original\",\n                    \"path\": \"C:/CiRA-CORE/[Project]/logs/image\",\n                    \"png\": false,\n                    \"use_custom_name\": true,\n                    \"use_fixed_name\": true,\n                    \"use_payload_name\": false\n                },\n                \"name\": \"ImageCapture\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -560.3195399999995,\n                \"y\": -105.74068999999989\n            }\n        },\n        {\n            \"id\": \"{b811d60b-443f-47d2-a374-b1210a3d9de5}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"rotate image\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"# ---------------\\n# For rotating the image to make the image angle \\n# ---------------\\n\\nimport shutil\\nimport datetime\\nimport os\\nimport cv2\\nimport numpy as np\\nimport random\\nimport math\\nfrom PIL import Image, ImageDraw\\n\\n# Define a function to rotate the image\\ndef rotate_image(image, angle_deg):\\n    height, width = image.shape[:2]\\n    \\n    if abs(angle_deg) > 60:\\n        angle_deg = max(min(angle_deg, 30), -30)\\n        \\n    rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), angle_deg, 1)\\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))\\n    return rotated_image\\n\\ndef resize_image(image, target_size):\\n    resized_image = cv2.resize(image, target_size)\\n    return resized_image\\n\\ndef enhance_image_quality(image):\\n    # Apply image color\\n    #gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\\n    #enhanced_image = cv2.equalizeHist(gray_image)\\n\\n    # Apply image enhancement technique (e.g., sharpening)\\n    kernel_sharpening = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])\\n    enhance_image_quality = cv2.filter2D(image, -1, kernel_sharpening)\\n    return enhance_image_quality\\n\\n# Load the image\\nimage_path = payload['modifi_img_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the sorted corner coordinates\\ncorner_sort = []\\n\\n# Iterate over the corners and store the coordinates\\nfor i in range(len(data_corner)):\\n    x = data_corner[i]['x']  # Get the x coordinate of the starting corner\\n    y = data_corner[i]['y']  # Get the y coordinate of the starting corner\\n\\n    corner_sort.append((x, y))\\n\\n# Sort the corner coordinates based on the y value in descending order\\ncorner_sort.sort(key=lambda c:c[-1], reverse=True)\\n\\n# Check if there is only one corner coordinate\\nif len(corner_sort) >= 2:\\n    # Initialize variables\\n    get_start = ()\\n    get_end = ()\\n    diff = 0\\n    height, width = image.shape[:2]\\n\\n    # Show result in corner_sort[]\\n    for i, corner in enumerate(corner_sort):\\n        print(\\\"Corner {}: ({}, {})\\\".format(i+1, corner[0], corner[1]))\\n    print(\\\"--------------------------------------\\\")\\n\\n    # Iterate over all possible pairs of coordinates\\n    if len(corner_sort) >= 2:\\n        for i in range(len(corner_sort)):\\n            for j in range(i, len(corner_sort)):\\n                if corner_sort[i] != corner_sort[j]:\\n                    if abs(corner_sort[i][0] - corner_sort[j][0]) > 30:\\n                        if abs(corner_sort[i][1] - corner_sort[j][1]) <= 40:\\n                            avg_y = abs((corner_sort[i][1]+corner_sort[j][1])/2)\\n                            print(\\\"Center of 2Y: {} + {} = {} / {}\\\".format(corner_sort[i][1], corner_sort[j][1], avg_y, (0.5*height)))\\n                            if avg_y < (0.5*height):\\n                                if (avg_y > diff):\\n                                    get_start = corner_sort[i]\\n                                    get_end = corner_sort[j]\\n    print(\\\"--------------------------------------\\\")\\n\\n\\n    # Check if a valid pair was found\\n    if get_start and get_end:\\n        x1, y1 = get_start\\n        x2, y2 = get_end\\n        print(\\\"start: ({}, {})\\\".format(x1, y1))\\n        print(\\\"end: ({}, {})\\\".format(x2, y2))\\n        print(\\\"--------------------------------------\\\")\\n\\n        # Calculate the angle of the line\\n        angle_rad = math.atan2(y2 - y1, x2 - x1)\\n        angle_deg = math.degrees(angle_rad)\\n\\n        # Subtract 180 from angle_deg and set it to the new value if it exceeds 90 degrees\\n        if angle_deg > 90:\\n            angle_deg -= 180\\n        elif angle_deg < -90:\\n            angle_deg += 180\\n            \\n        # Draw a line on the image from corner 1 to corner 2\\n        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 1)\\n\\n        print(\\\"Angle of the line [{}, {}]: {} degrees\\\".format(get_start, get_end, angle_deg))\\n\\n        # Rotate the image if there are corner coordinates\\n        rotated_image = rotate_image(image, angle_deg)  # Specify the desired angle in degrees   \\n\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(rotated_image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n    else:\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n        print(\\\"No corner coordinates found.\\\")\\n\\nelse:\\n    # Resize the image to a target size\\n    target_size = (1440, 1920)\\n    resized_image = resize_image(image, target_size)\\n\\n    # Enhance the quality of the image\\n    enhanced_image = enhance_image_quality(resized_image)\\n\\n    # Save the modified image\\n    output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n    cv2.imwrite(output_path, enhanced_image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    print(\\\"Error: Only one corner coordinate found.\\\")\\n    \\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_original.jpg'\\nfolder_path = 'C:/CiRA-CORE/[Project]/logs/image/original_image'\\ncurrent_date = datetime.date.today().strftime(\\\"%d%m%Y\\\")\\n\\n# Find the latest run number within the folder\\nrun_number = 1\\nwhile os.path.exists(os.path.join(folder_path, current_date + \\\"_\\\" + str(run_number) + \\\".jpg\\\")):\\n    run_number += 1\\n\\n# Generate the destination file path\\ndestination_path = os.path.join(folder_path, current_date + \\\"_\\\" + str(run_number) + \\\".jpg\\\")\\n\\n# Copy the file from source to destination\\nshutil.copy2(source_path, destination_path)\\n    \\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['file_run_number'] = current_date + \\\"_\\\" +  str(run_number)\\npayload['modifi_img_path'] = output_path\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"# ---------------\\n# For rotating the image to make the image angle \\n# ---------------\\n\\nimport shutil\\nimport datetime\\nimport os\\nimport cv2\\nimport numpy as np\\nimport random\\nimport math\\nfrom PIL import Image, ImageDraw\\n\\n# Define a function to rotate the image\\ndef rotate_image(image, angle_deg):\\n    height, width = image.shape[:2]\\n    \\n    if abs(angle_deg) > 60:\\n        angle_deg = max(min(angle_deg, 30), -30)\\n        \\n    rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), angle_deg, 1)\\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))\\n    return rotated_image\\n\\ndef resize_image(image, target_size):\\n    resized_image = cv2.resize(image, target_size)\\n    return resized_image\\n\\ndef enhance_image_quality(image):\\n    # Apply image color\\n    #gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\\n    #enhanced_image = cv2.equalizeHist(gray_image)\\n\\n    # Apply image enhancement technique (e.g., sharpening)\\n    kernel_sharpening = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])\\n    enhance_image_quality = cv2.filter2D(image, -1, kernel_sharpening)\\n    return enhance_image_quality\\n\\n# Load the image\\nimage_path = payload['modifi_img_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the sorted corner coordinates\\ncorner_sort = []\\n\\n# Iterate over the corners and store the coordinates\\nfor i in range(len(data_corner)):\\n    x = data_corner[i]['x']  # Get the x coordinate of the starting corner\\n    y = data_corner[i]['y']  # Get the y coordinate of the starting corner\\n\\n    corner_sort.append((x, y))\\n\\n# Sort the corner coordinates based on the y value in descending order\\ncorner_sort.sort(key=lambda c:c[-1], reverse=True)\\n\\n# Check if there is only one corner coordinate\\nif len(corner_sort) >= 2:\\n    # Initialize variables\\n    get_start = ()\\n    get_end = ()\\n    diff = 0\\n    height, width = image.shape[:2]\\n\\n    # Show result in corner_sort[]\\n    for i, corner in enumerate(corner_sort):\\n        print(\\\"Corner {}: ({}, {})\\\".format(i+1, corner[0], corner[1]))\\n    print(\\\"--------------------------------------\\\")\\n\\n    # Iterate over all possible pairs of coordinates\\n    if len(corner_sort) >= 2:\\n        for i in range(len(corner_sort)):\\n            for j in range(i, len(corner_sort)):\\n                if corner_sort[i] != corner_sort[j]:\\n                    if abs(corner_sort[i][0] - corner_sort[j][0]) > 30:\\n                        if abs(corner_sort[i][1] - corner_sort[j][1]) <= 40:\\n                            avg_y = abs((corner_sort[i][1]+corner_sort[j][1])/2)\\n                            print(\\\"Center of 2Y: {} + {} = {} / {}\\\".format(corner_sort[i][1], corner_sort[j][1], avg_y, (0.5*height)))\\n                            if avg_y < (0.5*height):\\n                                if (avg_y > diff):\\n                                    get_start = corner_sort[i]\\n                                    get_end = corner_sort[j]\\n    print(\\\"--------------------------------------\\\")\\n\\n\\n    # Check if a valid pair was found\\n    if get_start and get_end:\\n        x1, y1 = get_start\\n        x2, y2 = get_end\\n        print(\\\"start: ({}, {})\\\".format(x1, y1))\\n        print(\\\"end: ({}, {})\\\".format(x2, y2))\\n        print(\\\"--------------------------------------\\\")\\n\\n        # Calculate the angle of the line\\n        angle_rad = math.atan2(y2 - y1, x2 - x1)\\n        angle_deg = math.degrees(angle_rad)\\n\\n        # Subtract 180 from angle_deg and set it to the new value if it exceeds 90 degrees\\n        if angle_deg > 90:\\n            angle_deg -= 180\\n        elif angle_deg < -90:\\n            angle_deg += 180\\n            \\n        # Draw a line on the image from corner 1 to corner 2\\n        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 1)\\n\\n        print(\\\"Angle of the line [{}, {}]: {} degrees\\\".format(get_start, get_end, angle_deg))\\n\\n        # Rotate the image if there are corner coordinates\\n        rotated_image = rotate_image(image, angle_deg)  # Specify the desired angle in degrees   \\n\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(rotated_image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n    else:\\n        # Resize the image to a target size\\n        target_size = (1440, 1920)\\n        resized_image = resize_image(image, target_size)\\n\\n        # Enhance the quality of the image\\n        enhanced_image = enhance_image_quality(resized_image)\\n\\n        # Save the modified image\\n        output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n        cv2.imwrite(output_path, enhanced_image)\\n\\n        # Read the saved image\\n        img = cv2.imread(output_path)\\n\\n        print(\\\"No corner coordinates found.\\\")\\n\\nelse:\\n    # Resize the image to a target size\\n    target_size = (1440, 1920)\\n    resized_image = resize_image(image, target_size)\\n\\n    # Enhance the quality of the image\\n    enhanced_image = enhance_image_quality(resized_image)\\n\\n    # Save the modified image\\n    output_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n    cv2.imwrite(output_path, enhanced_image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    print(\\\"Error: Only one corner coordinate found.\\\")\\n    \\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_original.jpg'\\nfolder_path = 'C:/CiRA-CORE/[Project]/logs/image/original_image'\\ncurrent_date = datetime.date.today().strftime(\\\"%d%m%Y\\\")\\n\\n# Find the latest run number within the folder\\nrun_number = 1\\nwhile os.path.exists(os.path.join(folder_path, current_date + \\\"_\\\" + str(run_number) + \\\".jpg\\\")):\\n    run_number += 1\\n\\n# Generate the destination file path\\ndestination_path = os.path.join(folder_path, current_date + \\\"_\\\" + str(run_number) + \\\".jpg\\\")\\n\\n# Copy the file from source to destination\\nshutil.copy2(source_path, destination_path)\\n    \\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['file_run_number'] = current_date + \\\"_\\\" +  str(run_number)\\npayload['modifi_img_path'] = output_path\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 39.59999999999998,\n                \"y\": -105.6\n            }\n        },\n        {\n            \"id\": \"{dda5c47e-fa31-4518-bab3-30e73ad5b158}\",\n            \"model\": {\n                \"height\": 261,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 973,\n                \"width\": 180\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -70.64664688204347,\n                \"y\": 4.338833208114124\n            }\n        },\n        {\n            \"id\": \"{93e19714-9d17-4056-9fdf-817fe6542b6c}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"filp image\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import cv2\\nimport os\\n\\n# Load the image\\nimage_path = payload['ImageCapture']['image_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the corner coordinates\\ncorner_sort = []\\n\\n# Check if data_corner is empty\\nif len(data_corner) != 0:\\n    # Iterate over the corners and store the coordinates\\n    for i in range(len(data_corner)):\\n        x = data_corner[i]['x']  # Get the x coordinate of the corner\\n        y = data_corner[i]['y']  # Get the y coordinate of the corner\\n        corner_sort.append((x, y))\\n    \\n    # Find the min&max position x, y of corner\\n    min_x = min(corner_sort, key=lambda corner: corner[0])[0]\\n    max_y = min(corner_sort, key=lambda corner: corner[1])[1]\\n\\n    # Calculate the height and width of the image\\n    height, width = image.shape[:2]\\n\\n    output_path = r\\\"C:/CiRA-CORE/[Project]/logs/image/TempImage_flip.jpg\\\"\\n\\n    print(\\\"Min X: {}\\\".format(min_x))\\n    print(\\\"Min Y: {}\\\".format(max_y))\\n    print(\\\"58% H: {}\\\".format(0.58 * height))\\n    print(\\\"50% w: {}\\\".format(0.50 * width))\\n    print(\\\"--------------------------------------\\\")\\n\\n    if width < height and max_y > (0.58 * height):\\n        # Save the modified image\\n        print(\\\"rotate: 180\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_180)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x < (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_CLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x > (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_COUNTERCLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    else:\\n        # Save the original image\\n        cv2.imwrite(output_path, image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['modifi_img_path'] = output_path\\nelse :\\n payload['modifi_img_path'] = payload['ImageCapture']['image_path']\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import cv2\\nimport os\\n\\n# Load the image\\nimage_path = payload['ImageCapture']['image_path']\\nimage = cv2.imread(image_path)\\n\\n# Load data corner from payload\\ndata_corner = payload['DeepD_D']['detects'][0]['objects']\\n\\n# Create an empty list to store the corner coordinates\\ncorner_sort = []\\n\\n# Check if data_corner is empty\\nif len(data_corner) != 0:\\n    # Iterate over the corners and store the coordinates\\n    for i in range(len(data_corner)):\\n        x = data_corner[i]['x']  # Get the x coordinate of the corner\\n        y = data_corner[i]['y']  # Get the y coordinate of the corner\\n        corner_sort.append((x, y))\\n    \\n    # Find the min&max position x, y of corner\\n    min_x = min(corner_sort, key=lambda corner: corner[0])[0]\\n    max_y = min(corner_sort, key=lambda corner: corner[1])[1]\\n\\n    # Calculate the height and width of the image\\n    height, width = image.shape[:2]\\n\\n    output_path = r\\\"C:/CiRA-CORE/[Project]/logs/image/TempImage_flip.jpg\\\"\\n\\n    print(\\\"Min X: {}\\\".format(min_x))\\n    print(\\\"Min Y: {}\\\".format(max_y))\\n    print(\\\"58% H: {}\\\".format(0.58 * height))\\n    print(\\\"50% w: {}\\\".format(0.50 * width))\\n    print(\\\"--------------------------------------\\\")\\n\\n    if width < height and max_y > (0.58 * height):\\n        # Save the modified image\\n        print(\\\"rotate: 180\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_180)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x < (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_CLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    elif width > height and min_x > (0.50 * width):\\n        # Save the modified image\\n        print(\\\"rotate: 90_COUNTERCLOCKWISE\\\")\\n        rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\\n        cv2.imwrite(output_path, rotated_image)\\n    else:\\n        # Save the original image\\n        cv2.imwrite(output_path, image)\\n\\n    # Read the saved image\\n    img = cv2.imread(output_path)\\n\\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['modifi_img_path'] = output_path\\nelse :\\n payload['modifi_img_path'] = payload['ImageCapture']['image_path']\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -271.34397308926987,\n                \"y\": -105.94602691073015\n            }\n        },\n        {\n            \"id\": \"{4e84bca9-9484-4ebf-9893-55c75dc671cc}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"meter_corner\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,255,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,0,255\",\n                            \"filled\": false,\n                            \"name\": \"corner\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -413,\n                \"y\": -106\n            }\n        },\n        {\n            \"id\": \"{218a42fc-ae6b-466b-bea7-5777cfc7981e}\",\n            \"model\": {\n                \"height\": 263,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 181\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -538.4697933884295,\n                \"y\": 5.953068069120983\n            }\n        },\n        {\n            \"id\": \"{79457dc3-cbd1-45b3-aee0-d83bc8e605e5}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 1.2,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 2,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 2,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": true,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"meter_corner\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,0\",\n                            \"filled\": false,\n                            \"name\": \"corner\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -116.97197636773441,\n                \"y\": -106.70607745372583\n            }\n        },\n        {\n            \"id\": \"{22002a39-ba67-47af-b16c-c38ec286849c}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import pickle\\nimport os\\nimport re\\nimport time\\nfrom datetime import datetime, timedelta\\nfrom google_auth_oauthlib.flow import Flow, InstalledAppFlow\\nfrom googleapiclient.discovery import build\\nfrom googleapiclient.http import MediaFileUpload, MediaIoBaseDownload\\nfrom google.auth.transport.requests import Request\\n\\n# Start timing the execution\\nstart_time = time.time()\\n\\ndef Create_Service(client_secret_file, api_name, api_version, *scopes):\\n    CLIENT_SECRET_FILE = client_secret_file\\n    API_SERVICE_NAME = api_name\\n    API_VERSION = api_version\\n    SCOPES = [scope for scope in scopes[0]]\\n\\n    cred = None\\n\\n    # Set the pickle file path\\n    pickle_file = os.path.join(os.path.dirname(client_secret_file), 'token_{}_{}.pickle'.format(API_SERVICE_NAME, API_VERSION))\\n\\n    if os.path.exists(pickle_file):\\n        with open(pickle_file, 'rb') as token:\\n            cred = pickle.load(token)\\n\\n    if not cred or not cred.valid:\\n        if cred and cred.expired and cred.refresh_token:\\n            cred.refresh(Request())\\n        else:\\n            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)\\n            cred = flow.run_local_server()\\n\\n        with open(pickle_file, 'wb') as token:\\n            pickle.dump(cred, token)\\n\\n    try:\\n        service = build(API_SERVICE_NAME, API_VERSION, credentials=cred)\\n        print(API_SERVICE_NAME, 'service created successfully')\\n        return service\\n    except Exception as e:\\n        print('Unable to connect.')\\n        print(e)\\n        return None\\n\\ndef convert_to_RFC_datetime(year=1900, month=1, day=1, hour=0, minute=0):\\n    dt = datetime.datetime(year, month, day, hour, minute, 0).isoformat() + 'Z'\\n    return dt\\n\\n# Read the value of temp_time from the file (read the last line)\\ntry:\\n    with open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"r\\\") as file:\\n        lines = file.readlines()\\n        temp_time = lines[-1].strip() if lines else None\\nexcept FileNotFoundError:\\n    temp_time = None\\n\\ndate_now = datetime.now().strftime(\\\"%d-%m-%Y %H:%M:%S\\\")\\n\\nCLIENT_SECRET_FILE = r'C:\\\\CiRA-CORE\\\\[Project]\\\\src\\\\api\\\\client_secret.json'\\nAPI_NAME = 'drive'\\nAPI_VERSION = 'v3'\\nSCOPES = ['https://www.googleapis.com/auth/drive']\\n\\nservice = Create_Service(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)\\n\\nfolder_id = '1rmW5IZijo2uZnpjZrJAzVxOiWkYACkm2'\\nbase_folder_path = r'C:\\\\CiRA-CORE\\\\[Project]\\\\logs'\\n\\n#upload_folder_names = ['docs', 'image/combined_image', 'image/detect_dial', 'image/detect_number', 'image/original_image']\\nupload_folder_names = ['docs', 'image/combined_image']\\n\\nexcluded_files = [\\n                  'logs_upload_time.txt', \\n                  'TempImage_original.jpg', \\n                  'Combined_image.jpg',\\n                  'Temp_detect_dial.jpg',\\n                  'Temp_detect_Number.jpg',\\n                  'TempImage_flip.jpg',\\n                  'TempImage_rotate.jpg',\\n                  'line',\\n                  'desktop.ini'\\n                  ]\\n\\n# Update temp_time with the current time\\ntemp_time = date_now + \\\", Upload: {}\\\".format(\\\", \\\".join(upload_folder_names))\\n\\n# Save the updated temp_time to the file (append to a new line)\\nwith open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"a\\\") as file:\\n    file.write(temp_time + \\\"\\\\n\\\")\\n\\nprint(\\\"---------------------------------\\\")\\n\\ndef upload_files_recursive(folder_path, parent_folder_id):\\n    # Upload files from the current folder to the corresponding folder on Google Drive\\n    folder_name = os.path.basename(folder_path)\\n    folder_metadata = {\\n        'name': folder_name,\\n        'parents': [parent_folder_id],\\n        'mimeType': 'application/vnd.google-apps.folder'\\n    }\\n\\n    # Check if the folder already exists\\n    query = \\\"name='{}' and '{}' in parents and mimeType='application/vnd.google-apps.folder'\\\".format(folder_name, parent_folder_id)\\n    existing_folders = service.files().list(q=query, spaces='drive', fields='files(id)').execute()\\n    matching_folders = existing_folders.get('files', [])\\n\\n    if not matching_folders:\\n        try:\\n            folder = service.files().create(body=folder_metadata, fields='id').execute()\\n            print(\\\"Folder '{}' created with ID: {} \\\\n\\\".format(folder_name, folder['id']))\\n            folder_id = folder['id']  # Update folder_id with the newly created folder's ID\\n        except Exception as e:\\n            print(\\\"Error creating folder '{}': {} \\\\n\\\".format(folder_name, e.response['error']['message']))\\n            return\\n    else:\\n        folder_id = matching_folders[0]['id']\\n        print(\\\"\\\\nFolder '{}' already exists in Google Drive.\\\".format(folder_name))\\n\\n    # Upload files from the current folder\\n    folder_files = os.listdir(folder_path)\\n    for file_name in folder_files:\\n        file_path = os.path.join(folder_path, file_name)\\n        if os.path.isdir(file_path):\\n            # Recursively upload files from subfolders\\n            upload_files_recursive(file_path, folder_id)\\n        else:\\n            if file_name not in excluded_files:  # Check if file is not in the excluded files list\\n                file_metadata = {\\n                    'name': file_name,\\n                    'parents': [folder_id]\\n                }\\n                media = MediaFileUpload(file_path)\\n\\n                # Check if the file already exists in the folder\\n                query = \\\"name='{}' and '{}' in parents\\\".format(file_name, folder_id)\\n                existing_files = service.files().list(q=query, spaces='drive', fields='files(id)').execute()\\n                matching_files = existing_files.get('files', [])\\n\\n                if matching_files:\\n                    file_id = matching_files[0]['id']\\n                    try:\\n                        # Retrieve the file's metadata to update only the parent(s) field\\n                        file_metadata = service.files().get(fileId=file_id, fields='parents').execute()\\n                        previous_parents = \\\",\\\".join(file_metadata.get('parents', []))\\n\\n                        # Remove the file from its current parent(s)\\n                        service.files().update(fileId=file_id, removeParents=previous_parents).execute()\\n\\n                        # Add the file to the new parent folder\\n                        file = service.files().update(fileId=file_id, addParents=folder_id, fields='id').execute()\\n                        print(\\\">> File '{}' updated on Google Drive\\\".format(file_name))\\n                    except Exception as e:\\n                        print(\\\">> Error uploading file '{}'\\\".format(file_name))\\n                else:\\n                    try:\\n                        file_metadata = {\\n                            'name': file_name,\\n                            'parents': [folder_id]\\n                        }\\n                        media = MediaFileUpload(file_path)\\n                        file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()\\n                        print(\\\">> File '{}' uploaded to Google Drive\\\".format(file_name))\\n                    except Exception as e:\\n                        print(\\\">> Error uploading file '{}'\\\".format(file_name))\\n\\n# Check if folders exist in Google Drive, create if not\\nfor folder_name in upload_folder_names:\\n    folder_path = os.path.join(base_folder_path, folder_name)\\n    upload_files_recursive(folder_path, folder_id)\\n\\nprint(\\\"\\\\n---------------------------------\\\")\\n\\npayload.clear()\\npayload[\\\"upload_status\\\"] = \\\"Done\\\"\\n\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import pickle\\nimport os\\nimport re\\nimport time\\nfrom datetime import datetime, timedelta\\nfrom google_auth_oauthlib.flow import Flow, InstalledAppFlow\\nfrom googleapiclient.discovery import build\\nfrom googleapiclient.http import MediaFileUpload, MediaIoBaseDownload\\nfrom google.auth.transport.requests import Request\\n\\n# Start timing the execution\\nstart_time = time.time()\\n\\ndef Create_Service(client_secret_file, api_name, api_version, *scopes):\\n    CLIENT_SECRET_FILE = client_secret_file\\n    API_SERVICE_NAME = api_name\\n    API_VERSION = api_version\\n    SCOPES = [scope for scope in scopes[0]]\\n\\n    cred = None\\n\\n    # Set the pickle file path\\n    pickle_file = os.path.join(os.path.dirname(client_secret_file), 'token_{}_{}.pickle'.format(API_SERVICE_NAME, API_VERSION))\\n\\n    if os.path.exists(pickle_file):\\n        with open(pickle_file, 'rb') as token:\\n            cred = pickle.load(token)\\n\\n    if not cred or not cred.valid:\\n        if cred and cred.expired and cred.refresh_token:\\n            cred.refresh(Request())\\n        else:\\n            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)\\n            cred = flow.run_local_server()\\n\\n        with open(pickle_file, 'wb') as token:\\n            pickle.dump(cred, token)\\n\\n    try:\\n        service = build(API_SERVICE_NAME, API_VERSION, credentials=cred)\\n        print(API_SERVICE_NAME, 'service created successfully')\\n        return service\\n    except Exception as e:\\n        print('Unable to connect.')\\n        print(e)\\n        return None\\n\\ndef convert_to_RFC_datetime(year=1900, month=1, day=1, hour=0, minute=0):\\n    dt = datetime.datetime(year, month, day, hour, minute, 0).isoformat() + 'Z'\\n    return dt\\n\\n# Read the value of temp_time from the file (read the last line)\\ntry:\\n    with open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"r\\\") as file:\\n        lines = file.readlines()\\n        temp_time = lines[-1].strip() if lines else None\\nexcept FileNotFoundError:\\n    temp_time = None\\n\\ndate_now = datetime.now().strftime(\\\"%d-%m-%Y %H:%M:%S\\\")\\n\\nCLIENT_SECRET_FILE = r'C:\\\\CiRA-CORE\\\\[Project]\\\\src\\\\api\\\\client_secret.json'\\nAPI_NAME = 'drive'\\nAPI_VERSION = 'v3'\\nSCOPES = ['https://www.googleapis.com/auth/drive']\\n\\nservice = Create_Service(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)\\n\\nfolder_id = '1rmW5IZijo2uZnpjZrJAzVxOiWkYACkm2'\\nbase_folder_path = r'C:\\\\CiRA-CORE\\\\[Project]\\\\logs'\\n\\n#upload_folder_names = ['docs', 'image/combined_image', 'image/detect_dial', 'image/detect_number', 'image/original_image']\\nupload_folder_names = ['docs', 'image/combined_image']\\n\\nexcluded_files = [\\n                  'logs_upload_time.txt', \\n                  'TempImage_original.jpg', \\n                  'Combined_image.jpg',\\n                  'Temp_detect_dial.jpg',\\n                  'Temp_detect_Number.jpg',\\n                  'TempImage_flip.jpg',\\n                  'TempImage_rotate.jpg',\\n                  'line',\\n                  'desktop.ini'\\n                  ]\\n\\n# Update temp_time with the current time\\ntemp_time = date_now + \\\", Upload: {}\\\".format(\\\", \\\".join(upload_folder_names))\\n\\n# Save the updated temp_time to the file (append to a new line)\\nwith open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"a\\\") as file:\\n    file.write(temp_time + \\\"\\\\n\\\")\\n\\nprint(\\\"---------------------------------\\\")\\n\\ndef upload_files_recursive(folder_path, parent_folder_id):\\n    # Upload files from the current folder to the corresponding folder on Google Drive\\n    folder_name = os.path.basename(folder_path)\\n    folder_metadata = {\\n        'name': folder_name,\\n        'parents': [parent_folder_id],\\n        'mimeType': 'application/vnd.google-apps.folder'\\n    }\\n\\n    # Check if the folder already exists\\n    query = \\\"name='{}' and '{}' in parents and mimeType='application/vnd.google-apps.folder'\\\".format(folder_name, parent_folder_id)\\n    existing_folders = service.files().list(q=query, spaces='drive', fields='files(id)').execute()\\n    matching_folders = existing_folders.get('files', [])\\n\\n    if not matching_folders:\\n        try:\\n            folder = service.files().create(body=folder_metadata, fields='id').execute()\\n            print(\\\"Folder '{}' created with ID: {} \\\\n\\\".format(folder_name, folder['id']))\\n            folder_id = folder['id']  # Update folder_id with the newly created folder's ID\\n        except Exception as e:\\n            print(\\\"Error creating folder '{}': {} \\\\n\\\".format(folder_name, e.response['error']['message']))\\n            return\\n    else:\\n        folder_id = matching_folders[0]['id']\\n        print(\\\"\\\\nFolder '{}' already exists in Google Drive.\\\".format(folder_name))\\n\\n    # Upload files from the current folder\\n    folder_files = os.listdir(folder_path)\\n    for file_name in folder_files:\\n        file_path = os.path.join(folder_path, file_name)\\n        if os.path.isdir(file_path):\\n            # Recursively upload files from subfolders\\n            upload_files_recursive(file_path, folder_id)\\n        else:\\n            if file_name not in excluded_files:  # Check if file is not in the excluded files list\\n                file_metadata = {\\n                    'name': file_name,\\n                    'parents': [folder_id]\\n                }\\n                media = MediaFileUpload(file_path)\\n\\n                # Check if the file already exists in the folder\\n                query = \\\"name='{}' and '{}' in parents\\\".format(file_name, folder_id)\\n                existing_files = service.files().list(q=query, spaces='drive', fields='files(id)').execute()\\n                matching_files = existing_files.get('files', [])\\n\\n                if matching_files:\\n                    file_id = matching_files[0]['id']\\n                    try:\\n                        # Retrieve the file's metadata to update only the parent(s) field\\n                        file_metadata = service.files().get(fileId=file_id, fields='parents').execute()\\n                        previous_parents = \\\",\\\".join(file_metadata.get('parents', []))\\n\\n                        # Remove the file from its current parent(s)\\n                        service.files().update(fileId=file_id, removeParents=previous_parents).execute()\\n\\n                        # Add the file to the new parent folder\\n                        file = service.files().update(fileId=file_id, addParents=folder_id, fields='id').execute()\\n                        print(\\\">> File '{}' updated on Google Drive\\\".format(file_name))\\n                    except Exception as e:\\n                        print(\\\">> Error uploading file '{}'\\\".format(file_name))\\n                else:\\n                    try:\\n                        file_metadata = {\\n                            'name': file_name,\\n                            'parents': [folder_id]\\n                        }\\n                        media = MediaFileUpload(file_path)\\n                        file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()\\n                        print(\\\">> File '{}' uploaded to Google Drive\\\".format(file_name))\\n                    except Exception as e:\\n                        print(\\\">> Error uploading file '{}'\\\".format(file_name))\\n\\n# Check if folders exist in Google Drive, create if not\\nfor folder_name in upload_folder_names:\\n    folder_path = os.path.join(base_folder_path, folder_name)\\n    upload_files_recursive(folder_path, folder_id)\\n\\nprint(\\\"\\\\n---------------------------------\\\")\\n\\npayload.clear()\\npayload[\\\"upload_status\\\"] = \\\"Done\\\"\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -168.6510100000005,\n                \"y\": 840.6063599999998\n            }\n        },\n        {\n            \"id\": \"{53446407-4d48-4177-82ae-dffb4f5cd509}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 5,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 5,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 3,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": true,\n                    \"this_config_name\": \"number_meter\",\n                    \"this_config_name_2\": \"num\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,127\",\n                            \"filled\": true,\n                            \"name\": \"meter\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,255\",\n                            \"filled\": false,\n                            \"name\": \"0\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"182,255,0\",\n                            \"filled\": false,\n                            \"name\": \"1\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,109,255\",\n                            \"filled\": false,\n                            \"name\": \"2\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,218,0\",\n                            \"filled\": false,\n                            \"name\": \"3\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,219,255\",\n                            \"filled\": false,\n                            \"name\": \"4\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,108,0\",\n                            \"filled\": false,\n                            \"name\": \"5\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,181\",\n                            \"filled\": false,\n                            \"name\": \"6\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,1\",\n                            \"filled\": false,\n                            \"name\": \"7\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"0,255,71\",\n                            \"filled\": false,\n                            \"name\": \"8\"\n                        },\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,110\",\n                            \"filled\": false,\n                            \"name\": \"9\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -577.2725972809912,\n                \"y\": 370.53706999999963\n            }\n        },\n        {\n            \"id\": \"{8562beb6-c237-4826-b49e-48ae1a197bbe}\",\n            \"model\": {\n                \"data\": {\n                    \"center_only_2\": false,\n                    \"draw_roi\": true,\n                    \"enable_tracking\": false,\n                    \"exp_constant\": false,\n                    \"exp_scale\": true,\n                    \"exp_scale_h\": 1,\n                    \"exp_scale_w\": 1,\n                    \"expand_height\": 0,\n                    \"expand_width\": 0,\n                    \"font_scale\": 1.2,\n                    \"font_scale_2\": 5,\n                    \"font_thickness\": 2,\n                    \"font_thickness_2\": 5,\n                    \"frame_buffer\": 5,\n                    \"map_det_cfgs\": [\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"dial_crop\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"meter_corner\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]corner_number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"num\",\n                            \"config_path\": \"C:/CiRA-CORE/DataSet/WEIGHTS[number_0.13_163000]\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"number_meter\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]number_meter\"\n                        },\n                        {\n                            \"backend_name\": \"CUDA\",\n                            \"config_name\": \"pointer_dial\",\n                            \"config_path\": \"C:/CiRA-CORE/[Project]/libs/[WEIGHT]dial_pointer\"\n                        }\n                    ],\n                    \"max_dist\": 150,\n                    \"nms\": 0.4,\n                    \"nms_2\": 0.4,\n                    \"rect_thickness\": 2,\n                    \"rect_thickness_2\": 12,\n                    \"result_drawing\": true,\n                    \"result_drawing_2\": true,\n                    \"roi_h\": 5000,\n                    \"roi_w\": 5000,\n                    \"roi_x\": 0,\n                    \"roi_y\": 0,\n                    \"show_confidence\": true,\n                    \"show_confidence_2\": false,\n                    \"square_padding\": true,\n                    \"text_drawing\": false,\n                    \"text_drawing_2\": false,\n                    \"this_config_name\": \"dial_crop\",\n                    \"this_config_name_2\": \"pointer_dial\",\n                    \"thresh\": 50,\n                    \"thresh_2\": 50,\n                    \"txt_offset\": 10,\n                    \"txt_offset_2\": 10\n                },\n                \"name\": \"DeepD->D\",\n                \"node_enable\": true,\n                \"obj_colors_1\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"170,255,255\",\n                            \"filled\": true,\n                            \"name\": \"dial\"\n                        }\n                    ]\n                },\n                \"obj_colors_2\": {\n                    \"array\": [\n                        {\n                            \"alpha\": 0.3,\n                            \"color\": \"255,0,0\",\n                            \"filled\": false,\n                            \"name\": \"pointer\"\n                        }\n                    ]\n                }\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -118.9876599999986,\n                \"y\": 372.6048990909085\n            }\n        },\n        {\n            \"id\": \"{294dca87-7159-4840-973f-cbfb46c00608}\",\n            \"model\": {\n                \"height\": 261,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 184\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -552.2869560851706,\n                \"y\": 483.7719828478242\n            }\n        },\n        {\n            \"id\": \"{2433c482-e2e7-4110-b00f-74b88f574770}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"get data number\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\n\\n    # Save the modified image\\n    source_path = 'C:/CiRA-CORE/[Project]/logs/image/Temp_detect_Number.jpg'\\n    folder_path = 'C:/CiRA-CORE/[Project]/logs/image/detect_number/{}.jpg'.format(payload['file_run_number'])\\n\\n    # Copy the file from source to destination\\n    shutil.copy2(source_path, folder_path)\\n\\n    # Read the saved image\\n    img = cv2.imread('C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg')\\n    \\n    file_run_number = payload['file_run_number']\\n    \\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['number_digi'] = number_digi\\n    payload['number_confi'] = number_confi\\n    payload['file_run_number'] = file_run_number\\n    payload['modifi_img_path'] = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n    \\nelse:\\n    # Save the modified image\\n    source_path = 'C:/CiRA-CORE/[Project]/logs/image/Temp_detect_Number.jpg'\\n    folder_path = 'C:/CiRA-CORE/[Project]/logs/image/detect_number/{}.jpg'.format(payload['file_run_number'])\\n\\n    # Copy the file from source to destination\\n    shutil.copy2(source_path, folder_path)\\n\\n    # Read the saved image\\n    img = cv2.imread('C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg')\\n    \\n    file_run_number = payload['file_run_number']\\n\\n    # Update the payload with the rotated image path\\n    payload['number_digi'] = \\\"NF\\\"\\n    payload['number_confi'] = \\\"NF\\\"\\n    payload['file_run_number'] = file_run_number\\n    payload['modifi_img_path'] = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\n\\n# Load data from payload\\nobjects = payload['DeepD_D']['detects'][0]['objects']\\n\\nif(len(objects) > 0) :\\n    for i in range(len(objects)):\\n        for j in range(len(objects) - 1):\\n            if objects[j]['x'] > objects[j+1]['x']:\\n                # Swap\\n                tmp = objects[j]\\n                objects[j] = objects[j+1]\\n                objects[j+1] = tmp\\n\\n    number_digi = \\\"\\\"\\n    number_confi = 0\\n\\n    for i in range(len(objects)):\\n        number_digi += objects[i]['name']\\n        number_confi += objects[i]['confidence']\\n        \\n    number_confi = number_confi / len(objects)\\n\\n    print(number_digi)\\n    print(number_confi)\\n\\n    # Save the modified image\\n    source_path = 'C:/CiRA-CORE/[Project]/logs/image/Temp_detect_Number.jpg'\\n    folder_path = 'C:/CiRA-CORE/[Project]/logs/image/detect_number/{}.jpg'.format(payload['file_run_number'])\\n\\n    # Copy the file from source to destination\\n    shutil.copy2(source_path, folder_path)\\n\\n    # Read the saved image\\n    img = cv2.imread('C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg')\\n    \\n    file_run_number = payload['file_run_number']\\n    \\n    # Update the payload with the rotated image path\\n    payload.clear()\\n    payload['number_digi'] = number_digi\\n    payload['number_confi'] = number_confi\\n    payload['file_run_number'] = file_run_number\\n    payload['modifi_img_path'] = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n    \\nelse:\\n    # Save the modified image\\n    source_path = 'C:/CiRA-CORE/[Project]/logs/image/Temp_detect_Number.jpg'\\n    folder_path = 'C:/CiRA-CORE/[Project]/logs/image/detect_number/{}.jpg'.format(payload['file_run_number'])\\n\\n    # Copy the file from source to destination\\n    shutil.copy2(source_path, folder_path)\\n\\n    # Read the saved image\\n    img = cv2.imread('C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg')\\n    \\n    file_run_number = payload['file_run_number']\\n\\n    # Update the payload with the rotated image path\\n    payload['number_digi'] = \\\"NF\\\"\\n    payload['number_confi'] = \\\"NF\\\"\\n    payload['file_run_number'] = file_run_number\\n    payload['modifi_img_path'] = 'C:/CiRA-CORE/[Project]/logs/image/TempImage_rotate.jpg'\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -269.94825444983155,\n                \"y\": 372.0766429868175\n            }\n        },\n        {\n            \"id\": \"{4f8f5e98-3f8d-48fd-95d2-33bdc819df45}\",\n            \"model\": {\n                \"height\": 269,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 903,\n                \"width\": 190\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -776.82,\n                \"y\": 2.4200000000000035\n            }\n        },\n        {\n            \"id\": \"{906f17ab-11c5-4ace-a65d-0a7e1a45e015}\",\n            \"model\": {\n                \"height\": 259,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 766,\n                \"width\": 185\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -302.2996564561839,\n                \"y\": 484.5327850900889\n            }\n        },\n        {\n            \"id\": \"{1e5d7976-e374-44c8-b7d2-5133bbf2c308}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"combined_image\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import cv2\\nimport os\\nimport shutil\\nimport datetime\\n\\n# Load the images\\nimage_number_path = \\\"C:/CiRA-CORE/[Project]/logs/image/Temp_detect_number.jpg\\\"\\nimage_dial_path = \\\"C:/CiRA-CORE/[Project]/logs/image/Temp_detect_dial.jpg\\\"\\n\\nimage_number = cv2.imread(image_number_path)\\nimage_dial = cv2.imread(image_dial_path)\\n\\n# Check if the images are loaded successfully\\nif image_number is None or image_dial is None:\\n    print(\\\"Failed to load one or both images.\\\")\\n    exit()\\n\\n# Combine the images horizontally (side-by-side)\\ncombined_image = cv2.hconcat([image_number, image_dial])\\n\\n# Add a black bar at the bottom of the combined image\\nbar_height = 260\\ncombined_image = cv2.copyMakeBorder(\\n    combined_image, 0, bar_height, 0, 0, cv2.BORDER_CONSTANT, value=(0, 0, 0)\\n)\\n\\n# Add text on the black bar\\nresult = payload['result']\\ntext = \\\"Result: \\\"+ result\\nprint(text)\\ntext_position = (10, combined_image.shape[0] - 15)\\nfont = cv2.FONT_HERSHEY_SIMPLEX\\nfont_scale = 8\\ntext_color = (255, 255, 255)\\ntext_thickness = 16\\ncv2.putText(combined_image,text,text_position, font,font_scale,text_color,text_thickness,cv2.LINE_AA,)\\n\\n# Save the modified image\\noutput_path = \\\"C:/CiRA-CORE/[Project]/logs/image/Combined_image.jpg\\\"\\nfolder_path = 'C:/CiRA-CORE/[Project]/logs/image/combined_image/{}.jpg'.format(payload['file_run_number'])\\ncv2.imwrite(output_path, combined_image)\\n\\n# Copy the file from source to destination\\nshutil.copy2(output_path, folder_path)\\n\\n# Check if the modified image is saved successfully\\nif os.path.exists(output_path):\\n    print(\\\"Images combined successfully. Combined image saved at:\\\", output_path)\\nelse:\\n    print(\\\"Failed to save the combined image.\\\")\\n\\n# Read the saved image\\nimg = cv2.imread(output_path)\\n\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import cv2\\nimport os\\nimport shutil\\nimport datetime\\n\\n# Load the images\\nimage_number_path = \\\"C:/CiRA-CORE/[Project]/logs/image/Temp_detect_number.jpg\\\"\\nimage_dial_path = \\\"C:/CiRA-CORE/[Project]/logs/image/Temp_detect_dial.jpg\\\"\\n\\nimage_number = cv2.imread(image_number_path)\\nimage_dial = cv2.imread(image_dial_path)\\n\\n# Check if the images are loaded successfully\\nif image_number is None or image_dial is None:\\n    print(\\\"Failed to load one or both images.\\\")\\n    exit()\\n\\n# Combine the images horizontally (side-by-side)\\ncombined_image = cv2.hconcat([image_number, image_dial])\\n\\n# Add a black bar at the bottom of the combined image\\nbar_height = 260\\ncombined_image = cv2.copyMakeBorder(\\n    combined_image, 0, bar_height, 0, 0, cv2.BORDER_CONSTANT, value=(0, 0, 0)\\n)\\n\\n# Add text on the black bar\\nresult = payload['result']\\ntext = \\\"Result: \\\"+ result\\nprint(text)\\ntext_position = (10, combined_image.shape[0] - 15)\\nfont = cv2.FONT_HERSHEY_SIMPLEX\\nfont_scale = 8\\ntext_color = (255, 255, 255)\\ntext_thickness = 16\\ncv2.putText(combined_image,text,text_position, font,font_scale,text_color,text_thickness,cv2.LINE_AA,)\\n\\n# Save the modified image\\noutput_path = \\\"C:/CiRA-CORE/[Project]/logs/image/Combined_image.jpg\\\"\\nfolder_path = 'C:/CiRA-CORE/[Project]/logs/image/combined_image/{}.jpg'.format(payload['file_run_number'])\\ncv2.imwrite(output_path, combined_image)\\n\\n# Copy the file from source to destination\\nshutil.copy2(output_path, folder_path)\\n\\n# Check if the modified image is saved successfully\\nif os.path.exists(output_path):\\n    print(\\\"Images combined successfully. Combined image saved at:\\\", output_path)\\nelse:\\n    print(\\\"Failed to save the combined image.\\\")\\n\\n# Read the saved image\\nimg = cv2.imread(output_path)\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 307.87668676859533,\n                \"y\": 373.4603118842967\n            }\n        },\n        {\n            \"id\": \"{413f0a11-c603-418b-a8d1-bace5c2c9ee5}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_save\": true,\n                    \"jpg\": true,\n                    \"name\": \"Temp_detect_Number\",\n                    \"path\": \"C:/CiRA-CORE/[Project]/logs/image\",\n                    \"png\": false,\n                    \"use_custom_name\": true,\n                    \"use_fixed_name\": true,\n                    \"use_payload_name\": false\n                },\n                \"name\": \"ImageCapture\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -427.6625570247924,\n                \"y\": 371.95029314049526\n            }\n        },\n        {\n            \"id\": \"{f5ef9da6-3384-446c-b30e-a30ac6e79c11}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\nnum = payload['number_digi']\\n\\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/Temp_detect_dial.jpg'\\nfolder_path = 'C:/CiRA-CORE/[Project]/logs/image/detect_dial/{}.jpg'.format(payload['file_run_number'])\\n\\n# Copy the file from source to destination\\nshutil.copy2(source_path, folder_path)\\n\\nfile_run_number = payload['file_run_number']\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\\npayload['result'] = num  + \\\".\\\" + result\\npayload['file_run_number'] = file_run_number\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import shutil\\nimport datetime\\nimport os\\nimport math\\n\\n# Function split angle degrees to number 0-9\\ndef split_angle(angle_degrees):\\n    if angle_degrees < 0 or angle_degrees > 360:\\n        raise ValueError(\\\"Angle must be between 0 and 360 degrees\\\")\\n    \\n    if   angle_degrees >= 72  and angle_degrees < 108: return 0\\n    elif angle_degrees >= 108 and angle_degrees < 144: return 1\\n    elif angle_degrees >= 144 and angle_degrees < 180: return 2\\n    elif angle_degrees >= 180 and angle_degrees < 216: return 3\\n    elif angle_degrees >= 216 and angle_degrees < 252: return 4\\n    elif angle_degrees >= 252 and angle_degrees < 288: return 5\\n    elif angle_degrees >= 288 and angle_degrees < 324: return 6\\n    elif angle_degrees >= 324 and angle_degrees > 0  : return 7\\n    elif angle_degrees >= 0   and angle_degrees < 36 : return 8\\n    elif angle_degrees >= 36  and angle_degrees < 72 : return 9\\n\\nobj = payload['DeepD_D']['detects']\\nsorted_obj = sorted(obj, key=lambda x: x['y'])  # Sort data by 'y'\\nresult = \\\"\\\"\\n\\nfor element in sorted_obj:\\n    if element[\\\"objects\\\"]: \\n        # Get data dial\\n        square_x = element[\\\"x\\\"]\\n        square_y = element[\\\"y\\\"]\\n        \\n        for obj_element in element[\\\"objects\\\"]:\\n                # Get data pointer dial\\n                small_square_x = obj_element[\\\"x\\\"]\\n                small_square_y = obj_element[\\\"y\\\"]\\n\\n                # Calculate the angle in radians\\n                angle = math.atan2(small_square_y - square_y, small_square_x - square_x)\\n\\n                # Convert the angle to degrees\\n                angle_degrees = math.degrees(angle)\\n                if angle_degrees < 0:\\n                    angle_degrees += 360\\n                angle_degrees = (angle_degrees+180) %360\\n\\n                # Print the result\\n                print(\\\"angle \\\" + format(angle_degrees, '.2f') + \\\"ํํ is \\\" + str(split_angle(angle_degrees)))\\n                result += str(split_angle(angle_degrees))\\n    else:\\n        result += \\\"_\\\"\\n        \\nprint(\\\"Result: \\\"+str(result))\\n\\nnum = payload['number_digi']\\n\\n# Save the modified image\\nsource_path = 'C:/CiRA-CORE/[Project]/logs/image/Temp_detect_dial.jpg'\\nfolder_path = 'C:/CiRA-CORE/[Project]/logs/image/detect_dial/{}.jpg'.format(payload['file_run_number'])\\n\\n# Copy the file from source to destination\\nshutil.copy2(source_path, folder_path)\\n\\nfile_run_number = payload['file_run_number']\\n\\n# Update the payload with the rotated image path\\npayload.clear()\\npayload['dial'] = result\\npayload['result'] = num  + \\\".\\\" + result\\npayload['file_run_number'] = file_run_number\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 180.98735851239803,\n                \"y\": 372.48655661156965\n            }\n        },\n        {\n            \"id\": \"{7eb49acd-d30c-4cde-8011-2b0cd05cb221}\",\n            \"model\": {\n                \"height\": 265,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 46,\n                \"payload_v\": 0,\n                \"width\": 187\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -310.97,\n                \"y\": 4.84\n            }\n        },\n        {\n            \"id\": \"{9869eab2-9bee-4cc0-8337-0356b09cb0e6}\",\n            \"model\": {\n                \"height\": 261,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 1157,\n                \"width\": 317\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -60.65606500000045,\n                \"y\": 485.01366599999875\n            }\n        },\n        {\n            \"id\": \"{1a617b7a-2732-4650-80a2-c37721f69e9a}\",\n            \"model\": {\n                \"data\": {\n                    \"resp_timeout\": 10000,\n                    \"service_name\": \"line\"\n                },\n                \"name\": \"RosServer\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -702.2212736,\n                \"y\": -105.0779246\n            }\n        },\n        {\n            \"id\": \"{e495b75f-d5d5-4a35-af43-4e5c2be42429}\",\n            \"model\": {\n                \"name\": \"AutoRun\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -1016.5318899999991,\n                \"y\": 250.57405999999986\n            }\n        },\n        {\n            \"id\": \"{e11d0d65-291f-4178-91ca-f62301fee0f8}\",\n            \"model\": {\n                \"data\": {\n                    \"jpg\": true,\n                    \"png\": false,\n                    \"send_img\": true\n                },\n                \"name\": \"RosResponse\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 457.88995772727355,\n                \"y\": 372.4490890909087\n            }\n        },\n        {\n            \"id\": \"{a9ffcd58-fecc-40c7-ab29-4ddf573beb6a}\",\n            \"model\": {\n                \"flow_data_name\": \"img\",\n                \"name\": \"FlowDataGet\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -716.8899099999992,\n                \"y\": 370.4439199999997\n            }\n        },\n        {\n            \"id\": \"{167c08a4-5938-4ed5-aa67-b66324236447}\",\n            \"model\": {\n                \"data\": {\n                    \"line_msg_secret\": \"70582fe704c12271482b222b1a08d6cf\",\n                    \"line_msg_token\": \"Uaa5++WR4vmfN2hRHjT0Kwd2LKuK2MeXH+CE4pzheCBjp0RpZcxgPanQj3IxybywxQJ0LqRAoaa7rvv5uycuB1AMf90VIqdohCp7MjnLLlzf0obaelFzutMWYkNcjjpVtlPcyN1FWXJAh6Aj6P3OIQdB04t89/1O/w1cDnyilFU=\",\n                    \"ngrok_auth_token\": \"2JewrZKOMLnHFCsCqX86e1MR0AC_7YkvAuL1WzgkkpeCUJKCX\",\n                    \"ngrok_local_port\": 3000,\n                    \"ngrok_region\": \"jp\",\n                    \"ros_service_name\": \"line\",\n                    \"working_dir\": \"C:/CiRA-CORE/[Project]/logs/line\"\n                },\n                \"height\": 52,\n                \"name\": \"LineBot\",\n                \"node_enable\": true,\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -1014.604359999999,\n                \"y\": 351.30655999999976\n            }\n        },\n        {\n            \"id\": \"{247a3a0a-ec79-43d4-983d-3660a51ba59e}\",\n            \"model\": {\n                \"flow_data_name\": \"excel\",\n                \"name\": \"FlowDataGet\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -721.2688999999999,\n                \"y\": 842.1236999999995\n            }\n        },\n        {\n            \"id\": \"{8fa2fad4-e9e0-4e42-aceb-b3cf8e2d0430}\",\n            \"model\": {\n                \"data\": {\n                    \"auto_save\": true,\n                    \"jpg\": true,\n                    \"name\": \"Temp_detect_dial\",\n                    \"path\": \"C:/CiRA-CORE/[Project]/logs/image\",\n                    \"png\": false,\n                    \"use_custom_name\": true,\n                    \"use_fixed_name\": true,\n                    \"use_payload_name\": false\n                },\n                \"name\": \"ImageCapture\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 31.559754958678383,\n                \"y\": 372.84294264462744\n            }\n        },\n        {\n            \"id\": \"{cebb2029-6204-4f93-8161-d3391d5af87a}\",\n            \"model\": {\n                \"data\": {\n                    \"console\": \"\",\n                    \"js_code\": \"ifelse = ( payload.upload == true )\",\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"IfElse\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -284.41897000000023,\n                \"y\": 840.5809500000004\n            }\n        },\n        {\n            \"id\": \"{aa388581-d8a4-4ced-a53c-08b367bb1cb8}\",\n            \"model\": {\n                \"flow_data_name\": \"img\",\n                \"name\": \"FlowDataSet\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 210.9768099999998,\n                \"y\": -104.68314999999991\n            }\n        },\n        {\n            \"id\": \"{492ccc69-fba7-4067-a75f-c51c58b1fbb2}\",\n            \"model\": {\n                \"data\": {\n                    \"current_index\": -1,\n                    \"images_count\": 100,\n                    \"images_dir\": \"C:/CiRA-CORE/[Project]/assets/Test\",\n                    \"loop\": null\n                },\n                \"name\": \"ImageSlide\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -1328.9607748999993,\n                \"y\": 199.33042689999942\n            }\n        },\n        {\n            \"id\": \"{60667a70-e5f7-4b70-9723-b370a4eb889d}\",\n            \"model\": {\n                \"flow_data_name\": \"excel\",\n                \"name\": \"FlowDataSet\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 403.6257499999997,\n                \"y\": 274.13275999999985\n            }\n        },\n        {\n            \"id\": \"{ebdb59b3-83c6-4c6a-86d5-7d8efaeb1d0d}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"save to excel\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import os\\nfrom datetime import datetime\\nimport openpyxl\\nfrom openpyxl.drawing.image import Image\\nfrom openpyxl.styles import Alignment, Border, Side\\n\\ndef check_or_create_excel_file(file_path):\\n    if not os.path.exists(file_path):\\n        # Create a new workbook\\n        workbook = openpyxl.Workbook()\\n        workbook.save(file_path)\\n        print(\\\"New file created: {}\\\".format(file_path))\\n    else:\\n        print(\\\"File already exists: {}\\\".format(file_path))\\n\\ndef check_and_add_header(file_path):\\n    if os.path.exists(file_path):\\n        workbook = openpyxl.load_workbook(file_path)\\n        sheet = workbook.active\\n        if sheet.cell(row=1, column=1).value is None:\\n            header_row = ['No.', 'IMG_Original', 'Filename', 'IMG_DetectNum', 'Output', 'Confidence', 'IMG_DetectDial', 'Output', 'Timestamp']\\n            sheet.insert_rows(1)\\n            for col, header in enumerate(header_row, start=1):\\n                sheet.cell(row=1, column=col).value = header\\n                column_letter = openpyxl.utils.get_column_letter(col)\\n                column_width = len(header) + 2  # Adjust the additional width if needed\\n                sheet.column_dimensions[column_letter].width = column_width\\n            workbook.save(file_path)\\n            print(\\\"Header row added.\\\")\\n        else:\\n            print(\\\"Header row already exists.\\\")\\n    else:\\n        print(\\\"File not found: {}\\\".format(file_path))\\n\\ndef add_data(file_path, img_original, filename, img_detectnumber, output_number, confidence, img_detectdial, output_dial, timestamp):\\n    if os.path.exists(file_path):\\n        workbook = openpyxl.load_workbook(file_path)\\n        sheet = workbook.active\\n        next_row = sheet.max_row + 1\\n        auto_run_number = next_row - 1\\n        sheet.cell(row=next_row, column=1).value = auto_run_number\\n\\n        # Insert image into cells\\n        img_orig = Image(img_original)\\n        img_orig.width = 160\\n        img_orig.height = 180\\n        sheet.column_dimensions['B'].width = 200\\n        sheet.row_dimensions[next_row].height = 135\\n        img_orig.anchor = 'B{}'.format(next_row)  # Set the anchor point of the image\\n        sheet.add_image(img_orig)\\n\\n        img_number = Image(img_detectnumber)\\n        img_number.width = 160\\n        img_number.height = 180\\n        sheet.column_dimensions['D'].width = 200\\n        sheet.row_dimensions[next_row].height = 135\\n        img_number.anchor = 'D{}'.format(next_row)  # Set the anchor point of the image\\n        sheet.add_image(img_number)\\n\\n        img_dial = Image(img_detectdial)\\n        img_dial.width = 160\\n        img_dial.height = 180\\n        sheet.column_dimensions['G'].width = 200\\n        sheet.row_dimensions[next_row].height = 135\\n        img_dial.anchor = 'G{}'.format(next_row)  # Set the anchor point of the image\\n        sheet.add_image(img_dial)\\n\\n        sheet.cell(row=next_row, column=3).value = filename\\n        sheet.cell(row=next_row, column=5).value = output_number\\n        sheet.cell(row=next_row, column=6).value = confidence\\n        sheet.cell(row=next_row, column=8).value = output_dial\\n        sheet.cell(row=next_row, column=9).value = timestamp\\n\\n        # AutoFit column width for text cells\\n        for column in sheet.columns:\\n            max_length = 0\\n            column_letter = column[0].column_letter\\n            for cell in column:\\n                try:\\n                    if len(str(cell.value)) > max_length:\\n                        max_length = len(cell.value)\\n                except TypeError:\\n                    pass\\n            adjusted_width = (max_length + 5.5) * 1.2\\n            sheet.column_dimensions[column_letter].width = adjusted_width\\n\\n        # Center align text in all cells\\n        for row in sheet.iter_rows(min_row=1, max_row=next_row, min_col=1, max_col=9):\\n            for cell in row:\\n                cell.alignment = Alignment(horizontal='center', vertical='center')\\n\\n                # Add borders to cells\\n                border = Border(left=Side(style='thin'),\\n                                right=Side(style='thin'),\\n                                top=Side(style='thin'),\\n                                bottom=Side(style='thin'))\\n                cell.border = border\\n\\n        workbook.save(file_path)\\n        print(\\\"Data added.\\\")\\n    else:\\n        print(\\\"File not found: {}\\\".format(file_path))\\n\\n# Example usage\\ndate = datetime.now().strftime(\\\"%d-%m-%Y\\\")\\nfolder_path = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\"\\nfilename = \\\"{}.xlsx\\\".format(date)\\nfile_path = os.path.join(folder_path, filename)\\n\\ncheck_or_create_excel_file(file_path)\\ncheck_and_add_header(file_path)\\n\\n# Add data to the next row\\nfilename = payload['file_run_number']\\noutput_number = payload['number_digi']\\nconfidence = payload['number_confi']\\noutput_dial = payload['dial']\\ntimestamp = datetime.now().strftime(\\\"%d-%m-%Y %H:%M:%S\\\")\\n\\nimg_original = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\image\\\\original_image\\\\{}.jpg\\\".format(filename)\\nimg_detectnumber = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\image\\\\detect_number\\\\{}.jpg\\\".format(filename)\\nimg_detectdial = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\image\\\\detect_dial\\\\{}.jpg\\\".format(filename)\\n\\nadd_data(file_path, img_original, filename, img_detectnumber, output_number, confidence, img_detectdial, output_dial, timestamp)\\n\\nprint(\\\"New file created: {}\\\".format(file_path))\\n\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import os\\nfrom datetime import datetime\\nimport openpyxl\\nfrom openpyxl.drawing.image import Image\\nfrom openpyxl.styles import Alignment, Border, Side\\n\\ndef check_or_create_excel_file(file_path):\\n    if not os.path.exists(file_path):\\n        # Create a new workbook\\n        workbook = openpyxl.Workbook()\\n        workbook.save(file_path)\\n        print(\\\"New file created: {}\\\".format(file_path))\\n    else:\\n        print(\\\"File already exists: {}\\\".format(file_path))\\n\\ndef check_and_add_header(file_path):\\n    if os.path.exists(file_path):\\n        workbook = openpyxl.load_workbook(file_path)\\n        sheet = workbook.active\\n        if sheet.cell(row=1, column=1).value is None:\\n            header_row = ['No.', 'IMG_Original', 'Filename', 'IMG_DetectNum', 'Output', 'Confidence', 'IMG_DetectDial', 'Output', 'Timestamp']\\n            sheet.insert_rows(1)\\n            for col, header in enumerate(header_row, start=1):\\n                sheet.cell(row=1, column=col).value = header\\n                column_letter = openpyxl.utils.get_column_letter(col)\\n                column_width = len(header) + 2  # Adjust the additional width if needed\\n                sheet.column_dimensions[column_letter].width = column_width\\n            workbook.save(file_path)\\n            print(\\\"Header row added.\\\")\\n        else:\\n            print(\\\"Header row already exists.\\\")\\n    else:\\n        print(\\\"File not found: {}\\\".format(file_path))\\n\\ndef add_data(file_path, img_original, filename, img_detectnumber, output_number, confidence, img_detectdial, output_dial, timestamp):\\n    if os.path.exists(file_path):\\n        workbook = openpyxl.load_workbook(file_path)\\n        sheet = workbook.active\\n        next_row = sheet.max_row + 1\\n        auto_run_number = next_row - 1\\n        sheet.cell(row=next_row, column=1).value = auto_run_number\\n\\n        # Insert image into cells\\n        img_orig = Image(img_original)\\n        img_orig.width = 160\\n        img_orig.height = 180\\n        sheet.column_dimensions['B'].width = 200\\n        sheet.row_dimensions[next_row].height = 135\\n        img_orig.anchor = 'B{}'.format(next_row)  # Set the anchor point of the image\\n        sheet.add_image(img_orig)\\n\\n        img_number = Image(img_detectnumber)\\n        img_number.width = 160\\n        img_number.height = 180\\n        sheet.column_dimensions['D'].width = 200\\n        sheet.row_dimensions[next_row].height = 135\\n        img_number.anchor = 'D{}'.format(next_row)  # Set the anchor point of the image\\n        sheet.add_image(img_number)\\n\\n        img_dial = Image(img_detectdial)\\n        img_dial.width = 160\\n        img_dial.height = 180\\n        sheet.column_dimensions['G'].width = 200\\n        sheet.row_dimensions[next_row].height = 135\\n        img_dial.anchor = 'G{}'.format(next_row)  # Set the anchor point of the image\\n        sheet.add_image(img_dial)\\n\\n        sheet.cell(row=next_row, column=3).value = filename\\n        sheet.cell(row=next_row, column=5).value = output_number\\n        sheet.cell(row=next_row, column=6).value = confidence\\n        sheet.cell(row=next_row, column=8).value = output_dial\\n        sheet.cell(row=next_row, column=9).value = timestamp\\n\\n        # AutoFit column width for text cells\\n        for column in sheet.columns:\\n            max_length = 0\\n            column_letter = column[0].column_letter\\n            for cell in column:\\n                try:\\n                    if len(str(cell.value)) > max_length:\\n                        max_length = len(cell.value)\\n                except TypeError:\\n                    pass\\n            adjusted_width = (max_length + 5.5) * 1.2\\n            sheet.column_dimensions[column_letter].width = adjusted_width\\n\\n        # Center align text in all cells\\n        for row in sheet.iter_rows(min_row=1, max_row=next_row, min_col=1, max_col=9):\\n            for cell in row:\\n                cell.alignment = Alignment(horizontal='center', vertical='center')\\n\\n                # Add borders to cells\\n                border = Border(left=Side(style='thin'),\\n                                right=Side(style='thin'),\\n                                top=Side(style='thin'),\\n                                bottom=Side(style='thin'))\\n                cell.border = border\\n\\n        workbook.save(file_path)\\n        print(\\\"Data added.\\\")\\n    else:\\n        print(\\\"File not found: {}\\\".format(file_path))\\n\\n# Example usage\\ndate = datetime.now().strftime(\\\"%d-%m-%Y\\\")\\nfolder_path = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\"\\nfilename = \\\"{}.xlsx\\\".format(date)\\nfile_path = os.path.join(folder_path, filename)\\n\\ncheck_or_create_excel_file(file_path)\\ncheck_and_add_header(file_path)\\n\\n# Add data to the next row\\nfilename = payload['file_run_number']\\noutput_number = payload['number_digi']\\nconfidence = payload['number_confi']\\noutput_dial = payload['dial']\\ntimestamp = datetime.now().strftime(\\\"%d-%m-%Y %H:%M:%S\\\")\\n\\nimg_original = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\image\\\\original_image\\\\{}.jpg\\\".format(filename)\\nimg_detectnumber = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\image\\\\detect_number\\\\{}.jpg\\\".format(filename)\\nimg_detectdial = r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\image\\\\detect_dial\\\\{}.jpg\\\".format(filename)\\n\\nadd_data(file_path, img_original, filename, img_detectnumber, output_number, confidence, img_detectdial, output_dial, timestamp)\\n\\nprint(\\\"New file created: {}\\\".format(file_path))\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -582.3124999999999,\n                \"y\": 841.7244\n            }\n        },\n        {\n            \"id\": \"{0908b9f0-750b-43be-873c-82b927bc2103}\",\n            \"model\": {\n                \"name\": \"WaitFlows\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 311.4539999999997,\n                \"y\": 274.1859999999998\n            }\n        },\n        {\n            \"id\": \"{f3393d2b-265a-4491-9831-3ae349e6a231}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"1. Python2\",\n                    \"script\": \"import datetime\\nfrom datetime import timedelta\\n\\ntry:\\n    with open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"r\\\") as file:\\n        lines = file.readlines()\\n        temp_time = lines[-1].strip() if lines else None\\nexcept IOError:\\n    temp_time = None\\n\\ndate_now = datetime.datetime.now().strftime(\\\"%d-%m-%Y %H:%M:%S\\\")\\n\\nif temp_time is not None:\\n    temp_time_parts = temp_time.split(\\\", \\\")\\n\\n    temp_time_dt = datetime.datetime.strptime(temp_time_parts[0], \\\"%d-%m-%Y %H:%M:%S\\\")\\n    date_now_dt = datetime.datetime.strptime(date_now, \\\"%d-%m-%Y %H:%M:%S\\\")\\n\\n    # Calculate the time difference\\n    time_diff = date_now_dt - temp_time_dt\\n\\n    # Assuming you have defined `time_diff` somewhere before this point\\n    if time_diff > timedelta(hours=4):\\n        payload['upload'] = True\\n    else:\\n        payload['upload'] = False\\n\\nelse:\\n    # Update temp_time with the current time\\n    temp_time = date_now + \\\", [Reset, Set new time]\\\"\\n\\n    # Save the updated temp_time to the file (append to a new line)\\n    with open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"a\\\") as file:\\n        file.write(temp_time + \\\"\\\\n\\\")\\n\",\n                    \"tmp_path\": \"C:/Users/panup\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"import datetime\\nfrom datetime import timedelta\\n\\ntry:\\n    with open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"r\\\") as file:\\n        lines = file.readlines()\\n        temp_time = lines[-1].strip() if lines else None\\nexcept IOError:\\n    temp_time = None\\n\\ndate_now = datetime.datetime.now().strftime(\\\"%d-%m-%Y %H:%M:%S\\\")\\n\\nif temp_time is not None:\\n    temp_time_parts = temp_time.split(\\\", \\\")\\n\\n    temp_time_dt = datetime.datetime.strptime(temp_time_parts[0], \\\"%d-%m-%Y %H:%M:%S\\\")\\n    date_now_dt = datetime.datetime.strptime(date_now, \\\"%d-%m-%Y %H:%M:%S\\\")\\n\\n    # Calculate the time difference\\n    time_diff = date_now_dt - temp_time_dt\\n\\n    # Assuming you have defined `time_diff` somewhere before this point\\n    if time_diff > timedelta(hours=4):\\n        payload['upload'] = True\\n    else:\\n        payload['upload'] = False\\n\\nelse:\\n    # Update temp_time with the current time\\n    temp_time = date_now + \\\", [Reset, Set new time]\\\"\\n\\n    # Save the updated temp_time to the file (append to a new line)\\n    with open(r\\\"C:\\\\CiRA-CORE\\\\[Project]\\\\logs\\\\docs\\\\logs_upload_time.txt\\\", \\\"a\\\") as file:\\n        file.write(temp_time + \\\"\\\\n\\\")\\n\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -434.59293000000025,\n                \"y\": 841.37097\n            }\n        },\n        {\n            \"id\": \"{e42421d1-de63-46de-932b-9d78ae905aae}\",\n            \"model\": {\n                \"height\": 113,\n                \"label\": {\n                    \"bold\": true,\n                    \"console\": \"\",\n                    \"font\": \"Ubuntu\",\n                    \"key\": \"var text = payload.result\\nlabel = text\",\n                    \"size\": 38,\n                    \"widget_state\": {\n                        \"auto_indent\": true,\n                        \"auto_parent\": true,\n                        \"size\": 11,\n                        \"style\": \"Dracula\",\n                        \"widget_st_w\": 0,\n                        \"word_wrap\": false\n                    }\n                },\n                \"name\": \"Label\",\n                \"node_enable\": true,\n                \"width\": 437\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 316.0381916010008,\n                \"y\": 495.6622557590002\n            }\n        }\n    ],\n    \"scene_data\": {\n        \"flow_view_pos_x\": 220.23692924356993,\n        \"flow_view_pos_y\": 558.2186670890283,\n        \"flow_view_zoom_factor\": 0.5131581182307067\n    }\n}\n",
            "name": "Main"
        }
    ]
}
